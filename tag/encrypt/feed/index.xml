<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Insight IT</title><link>https://www.insight-it.ru/</link><description></description><atom:link href="https://www.insight-it.ru/tag/encrypt/feed/index.xml" rel="self"></atom:link><lastBuildDate>Fri, 01 Feb 2008 15:43:00 +0300</lastBuildDate><item><title>Обратного пути нет</title><link>https://www.insight-it.ru//security/2008/obratnogo-puti-net/</link><description>&lt;h3 class="right" id="ili-vvedenie-v-kheshirovanie"&gt;&amp;hellip;или введение в хэширование&lt;/h3&gt;
&lt;p&gt;Под таким неоднозначным заголовком я решил разместить всеголишь
повествование о такой неотъемлимой части криптографии как hash-функции и
алгоритмы.&lt;/p&gt;
&lt;p&gt;Не думаю, что многим из читателей будет интересен этот вопрос с
математической точки зрения, а также сомневаюсь что смогу достаточно
качественно осветить его в этой перспективе, так что позволю сделать
более "приземленный" обзор возможных технологии хэширования.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 id="vvedenie"&gt;Введение&lt;/h3&gt;
&lt;p&gt;Под словом &lt;em&gt;хэширование&lt;/em&gt; обычно понимают процесс преобразования данных
произвольной длины в двоичную строку фиксированной длины. Происходит он
с помощью хэш-функций, которые, в свою очередь, реализуют
соответствующие им алгоритмы. Таких алгоритмов и, соответственно,
функций существует достаточно много, каждый из них обладает своими
свойствами, преимуществами и недостатками.&lt;/p&gt;
&lt;p&gt;Общим фактом для всех хэш-функций является отсутствие &lt;em&gt;обратной&lt;/em&gt;
функции, то есть функции, однозначно преобразующей полученное значение
(которое как раз принято называть словом &lt;em&gt;хэш&lt;/em&gt; или &lt;em&gt;hash&lt;/em&gt;) обратно в
исходное. Факт этот достаточно очевиден - если бы любой объем информации
можно было бы преобразовать в достаточно небольшого фиксированного
размера, не зависящего от исходного объема данных, двоичную строку и при
этом иметь возможность восстановить по ней исходную информацию, то это,
как минимум, стало бы революцией в сфере хранения и архивирования
данных.&lt;/p&gt;
&lt;h3 id="svoistva"&gt;Свойства&lt;/h3&gt;
&lt;p&gt;Далеко не все хэш-функции применимы в криптографии, именно из-за того,
что, как Вы возможно уже знаете из &lt;a href="https://www.insight-it.ru/security/2008/bezopasnoe-obshhenie/"&gt;предыдущей записи о
криптографии&lt;/a&gt;, основной
целью криптографии изначально являлось сокрытие информации, а для ее
обеспечения необходимо обладание алгоритмом хэширования рядом свойств,
обеспечивающих защиту от потенциальных атак, то есть попыток раскрыть с
тои или иной степенью точности исходные данные по имеющемуся хэшу.&lt;/p&gt;
&lt;h4&gt;Устойчивость к коллизиям&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Коллизия&lt;/strong&gt; &amp;ndash; пара различных прообразов, для которых значение хэша совпадает.&lt;/p&gt;
&lt;p&gt;Устойчивость к возникновению коллизий заключается в том, что &lt;strong&gt;никто&lt;/strong&gt;
не может найти такую пару исходных строк, которая имела бы один и тот же
хэш.&lt;/p&gt;
&lt;p&gt;Если взглянуть на это свойство с точки зрения обычного образованного
человека, то нетрудно заметить, что возможных вариантов исходных данных
практически бесконечное количество, а возможных хэшей - лишь 2 в степени
фиксированной длины хэша. Из чего было бы логичным сделать вывод о том,
что такие пары существуют. Но, как ни странно для всех криптографических
алгоритмов, такие пары все еще кем-либо не найдены.&lt;/p&gt;
&lt;p&gt;Единственный возможный способ найти такие пары - вычислить с помощью
компьютера, сложно дать какое-либо четкое доказательство почему
&lt;em&gt;человек&lt;/em&gt; не в состоянии самостоятельно обнаружить коллизию, но тем не
менее это так. Если не верите на слово - можете попробовать заняться
этим сами в отношении хотябы самых простых и распространенных
алгоритмов, например &lt;strong&gt;md5&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Обнаружение коллизий с помощью специализированных программ в большинстве
случаев не является сложной задачей и ограниченно лишь вычислительной
мощностью используемых компьютеров или кластеров. Так как рост
производительность современных вычислительных систем растет семимильными
шагами, требования к устойчивости хэширующим алгоритмам растут ничуть не
меньшими темпами.&lt;/p&gt;
&lt;p&gt;В научной литературе принята своеобразная классификация алгоритмов
хэширования по устойчивости к обнаружению коллизий типов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Первый тип&lt;/em&gt;: заключается в том, что при фиксированном первой двоичной строке - невозможно подобрать к ней вторую с таким же хэшем.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Второй тип&lt;/em&gt;: отличается от первого тем, что обнаружение коллизии невозможно и для произвольной пары сообщений.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Однонаправленность&lt;/h4&gt;
&lt;p&gt;Это свойство заключается в отсутствии возможности &lt;em&gt;эффективно&lt;/em&gt; вычислить
прообраз по хэшу и прямо вытекает из предыдущего свойства, для
подтверждения этого факта существует вполне конкретное математическое
доказательство, но приводить его здесь я, с Вашего позволения, не буду.
Одного факта устойчивости к коллизиям недостаточно для утверждения, что
алгоритм обладает свойством однонаправленности, но, как известно,
большинство криптографических алгоритмов хэширования им обладают.
Упомянутое выше доказательство базируется как раз на попытке
воспроизведения действий потенциального злоумышленника, пытающегося
опровергнуть однонаправленность алгоритма с помощью нахождения
"обратного пути" от хэша к прообразу, и доказательства обреченности его
попыток на провал.&lt;/p&gt;
&lt;h4&gt;Кардинальное изменение хэша при незначительном изменении оригинала&lt;/h4&gt;
&lt;p&gt;Еще одно не совсем очевидное свойств, связанное с предыдущими. Если бы
хэши от отличающихся на допустим один бит прообразов практически
полностью совпадали, то этот факт сильно упрощал бы вычисление возможных
коллизий и, как следствие (или причина?), нарушало бы устойчивость к
ним.&lt;/p&gt;
&lt;h3 id="primenenie"&gt;Применение&lt;/h3&gt;
&lt;p&gt;На практике криптографические хэширующие функции имеет несколько
вариантов применения, вот основные из них:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Хранение аутентификационных данных пользователей сайтов или
    программных продуктов.&lt;/strong&gt; В случае чисто теоретически возможной
    ошибки программистов или каких-либо других людей или просто имея
    доступ к базе данных на том или ином основании, потенциальный
    злоумышленник может получить доступ к закрытым компонентам того или
    иного проекта, в том числе и к базе данных пользователей. Если
    такого рода данные хранились бы в открытом виде, он получил бы
    полный доступ ко всем учетным записям пользователей. Для избежания
    возможности возникновения подобной ситуации принято хранить не сами
    логин и пароль пользователей, а их хэши. В этом случае для
    аутентификации введенные пользователем данные пропускаются через тот
    же алгоритм хэширования и полученный хэш сравнивается с хранящимся в
    БД.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Проверка целостности копии данных.&lt;/strong&gt; Чаще всего этот способ
    проверки соответствия копии оригиналу используется в отсутствии
    доступа к оригиналу. В качестве примера можно привести передачу
    больших объемов информации через ненадежное пространство (чаще всего
    Интернет), многие файловые серверы хранят рядом с большими файлами
    вычисленные от них хэши с использованием популярных алгоритмов,
    посетитель, скачав файл, может убедиться в его соответствии
    оригиналу, просто вычислив такой же хэш от копии и сравнив с
    доступным хэшем от оригинала. Но такой же принцип может
    использоваться и при доступном оригинале, например, многие программы
    для прожига образов на компакт-диски используют схожий принцип для
    проверки соответствия полученного диска образу.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Если же слегка отвлечься от криптографии, то можно найти еще достаточно
большое количество вариантов применения хэш-функций, таких как
хэш-таблицы, генерация псевдо-случайных чисел, поиск текста и многие
другие.&lt;/p&gt;
&lt;h4&gt;Заключение&lt;/h4&gt;
&lt;p&gt;Надеюсь сегодня мне успешно удалось осветить еще один компонент науки
под названием криптография, в обозримом будущем я планирую написать
несколько записей на эту же тему, но более практического характера, не
пропустить момент их публикации вам поможет &lt;a href="/feed/"&gt;подписка на RSS-ленту моего
блога&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Fri, 01 Feb 2008 15:43:00 +0300</pubDate><guid>tag:www.insight-it.ru,2008-02-01:security/2008/obratnogo-puti-net/</guid><category>encrypt</category><category>hash</category><category>защита интернет-ресурсов</category><category>информационные технологии</category><category>коллизия</category><category>Криптография</category><category>хэш</category><category>хэширование</category><category>шифрование</category></item><item><title>Безопасное общение</title><link>https://www.insight-it.ru//security/2008/bezopasnoe-obshhenie/</link><description>&lt;h3 class="right" id="ili-vvedenie-v-kriptografiiu"&gt;...или введение в криптографию&lt;/h3&gt;
&lt;p&gt;Представим, что два человека хотят общаться, но при этом хотят сохранить
свой разговор в секрете. Для этого у них есть идеальный канал связи,
который представляет собой цельную, непроницаемую для внешних
воздействий трубу, что приводит к тому, что когда один из них шепчет
что-либо в нее то только второй человек сможет получить сообщение,
приложив ухо к противоположному концу трубы. Общение по такому каналу
связи сравнимо с ситуацией, когда помимо них во всем мире не
существовало бы других людей.&lt;/p&gt;
&lt;p&gt;Но, к сожалению, таких каналов связи не существует, но это не мешает
стремиться снабжать существующие каналы связи свойствами, приближающими
их к идеальному, об этом мы сегодня и поговорим.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Как известно, наукой, посвященной теории и практике сокрытия данных,
является криптография (из греческого: &amp;kappa;&amp;rho;&amp;upsilon;&amp;pi;&amp;tau;ό&amp;sigmaf; - скрытый и &amp;gamma;&amp;rho;ά&amp;phi;&amp;omega; -
писать). Несмотря на свою историю, насчитывающую не одну тысячу лет, эта
наука и в современном мире нашла множество применений.&amp;nbsp; С применением
этой науки возможно решение самых разнообразных проблем, но основной
задачей, с которой призвана справляться современная криптография
является как раз относительно безопасная передача данных через
ненадежное пространство.&lt;/p&gt;
&lt;p&gt;Для максимального приближения реальных каналов связи к идеальному,
необходимо выделить основные цели, к которым необходимо стремиться, в
нашем случае их две:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;приватность&lt;/strong&gt; - сокрытие содержимого передаваемых данных от
    возможных злоумышленников, с целью предотвращения возможности их
    получения или изменения&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;аутентификация&lt;/strong&gt; - возможность получателя данных убедиться, что
    принятые им данные действительно были переданы отправителем и не
    претерпели в процессе никаких изменений&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для реализации этих целей криптография предоставляет отправителю и
получателю &lt;em&gt;протокол&lt;/em&gt;, в общем случае он представляет собой совокупность
программ и алгоритмов. Протокол должен предоставлять как минимум по
одному алгоритму (реализованному в программе) каждому участнику процесса
передачи данных, в нашем случае получателю и отправителю. Отправителю
должна быть предоставлена возможность упаковать данные, предназначенные
для отправки, именно таким образом, чтобы получатель с помощью своей
программы мог не только распаковать данные в первоначальную форму, но и
убедиться, что они были отправлены именно в таком виде.&lt;/p&gt;
&lt;p&gt;Залогом уверенности в том, что передача данных безопасна, является
наличие чего-либо что знает или может сделать получатель, но не знает
или не может сделать. Использование этой формы &lt;em&gt;асимметрии&lt;/em&gt; и является
основой для большинства современных методов шифрования информации. Этот
объект, обуславливающий возникновение асимметрии, принято называть
словом &lt;em&gt;ключ&lt;/em&gt;. Формально говоря ключ является одним из параметров
шифрования, определяющим каким именно образом были преобразованы данные
заранее известным алгоритмом. Основная классификация алгоритмов
шифрования основывается на том, кто изначально владеет ключом, принято
разделять их на алгоритмы с симметричным (т.е. секретным) и
асимметричным (т.е. публичным) ключами.&lt;/p&gt;
&lt;h3 id="algoritmy-s-simmetrichnym-kliuchom"&gt;Алгоритмы с симметричным ключом&lt;/h3&gt;
&lt;p&gt;В самом простом случае получатель и отправитель являются владельцами
одного и того же ключа, представляющего собой случайно выбранную строку,
то есть последовательность бит заданной длины. С помощью этого ключа они
получают возможность исключить вмешательство посторонних лиц в передачу
данных (будем считать что ключи
хранятся на компьютерах отправителя и получателя, и какая-либо
возможность получения их оттуда третьими лицами отсутствует).
Логичным было бы возникновение вопроса о том как же изначально ключ
попал в их распоряжение, не попав в руки злоумышленников, но ответ на
него выходит за рамки этого повествования, для нас намного важнее сам
процесс использования ключа.&lt;/p&gt;
&lt;p&gt;Сам процесс передачи достаточно прост: с помощью первого
предоставленного протоколом алгоритма и имеющегося ключа, отправитель
&lt;em&gt;шифрует (&lt;a href="/tag/encrypt/"&gt;encrypt&lt;/a&gt;)&lt;/em&gt; сообщение, и получает на выходе
зашифрованное сообщение, которое и будет отправлено получателю через
ненадежный канал. Получатель же в свою очередь, применив второй алгоритм
и все тот же ключ, &lt;em&gt;расшифровывает (&lt;a href="/tag/decrypt/"&gt;decrypt&lt;/a&gt;)&lt;/em&gt; полученное
сообщение и в идеале получает исходное сообщение.&lt;/p&gt;
&lt;p&gt;Приватность в этом случае достигается за счет того, что даже зная
алгоритм и перехватив передаваемое сообщение восстановление исходного
текста без ключа невозможно. Но в некоторых случаях даже не имея
возможности точно расшифровать сообщения, злоумышленник может с
некоторой ненулевой вероятностью предположить содержимое исходного
сообщения, основываясь на длине передаваемого сообщения (вполне
очевидно, что в большинстве случаев длина сообщения и длина исходного
текста - величины зависимые). Но такая вероятность чаще всего ничтожно
мала, но если злоумышленник знает что-либо о структуре исходного
сообщения и о том что оно собой представляет, этот факт может позволить
ему предполагать с более высоким шансом на успех.&lt;/p&gt;
&lt;p&gt;Аутентификация реализуется несколько более сложным образом: для того
чтобы предоставить гарантию что сообщение было передано именно
отправителем, протокол предоставляет еще два алгоритма (которые правда
могут совпадать) алгоритма. Помимо самого сообщения отправитель
вычисляет "метку" - результат выполнения некой функции, аргументами
которой являются ключ и исходное сообщение. Метка отправляется вместе с
зашифрованным сообщением, и когда&amp;nbsp; получатель применяет свой второй
алгоритм на полученной метке и сообщении, он может точно определить
обладал ли составитель этого сообщения ключом и, как следствие, не
являлся ли он "злоумышленником".&lt;/p&gt;
&lt;h3 id="algoritmy-s-asimmetrichnym-kliuchom"&gt;Алгоритмы с асимметричным ключом&lt;/h3&gt;
&lt;p&gt;Главной особенностью этого класса алгоритмов является использование
&lt;strong&gt;пары&lt;/strong&gt; ключей: &lt;em&gt;публичного&lt;/em&gt; и &lt;em&gt;секретного&lt;/em&gt;. Их названия говорят сами
за себя: публичный ключ участника передачи данных предоставляется им в
свободный доступ и привязывается к его личности, а секретный так и
остается известен только его владельцу.&lt;/p&gt;
&lt;p&gt;Передача сообщения происходит следующим образом: отправитель получает
копию публичного ключа &lt;em&gt;получателя&lt;/em&gt; из какого-либо общедоступного
источника, с его помощью зашифровывает по заранее известному алгоритму
сообщение и отправляет получателю. Получатель же, обладая &lt;em&gt;секретным&lt;/em&gt;
ключом, предназначенным для расшифровывания сообщений, которые были
составлены с помощью &lt;em&gt;его же&lt;/em&gt; публичного ключа, получает исходное
сообщение.&lt;/p&gt;
&lt;p&gt;В отличии от алгоритмов с симметричным ключом получатель и отправитель
могут даже быть незнакомы, но это все равно позволяет отправителю
передавать сообщения получателю и быть точно уверенным, что &lt;em&gt;только&lt;/em&gt;
получатель сможет получить из переданного сообщения исходное, другими
словами этот механизм реализует &lt;em&gt;приватность&lt;/em&gt; передачи данных.&lt;/p&gt;
&lt;p&gt;Передача сообщений по тому же принципу может быть организована и с
помощью пары ключей отправителя, в этом случае идет речь о так
называемой &lt;strong&gt;цифровой подписи&lt;/strong&gt;. Отправитель прикрепляет к сообщению
последовательность бит, которая является результатом функции от его
секретного ключа и исходного сообщения, получатель же имеет возможность
с помощью публичного ключа отправителя проверить действительно ли
сообщение было составлено именно им и не притерпело никаких изменений в
процессе передачи, что говорит о наличии &lt;em&gt;аутентификации&lt;/em&gt; в этом методе.&lt;/p&gt;
&lt;p&gt;В отличии от алгоритмов с симметричным ключом, цифровая подпись может
быть при необходимости использована в суде как доказательство того, что
сообщение было отправлено именно им, ведь возможность подделать ее
отсутствует как у получателя так и у всех остальных лиц не обладающих
секретным ключом (если секретный ключ был бы известен получателю, как в
ситуации с симметричным ключом, то была бы возможность подделки со
стороны получателя). Даже если отправитель заявит что секретный ключ был
украден, этот факт расценивается как проблема отправителя и
ответственности за документы подписанные этим ключом с него не снимает.&lt;/p&gt;
&lt;h3 id="v-kachestve-zakliucheniia"&gt;В качестве заключения...&lt;/h3&gt;
&lt;p&gt;...хотелось бы сказать, что каждый упомянутый подход к обеспечению
безопасности передачи информации имеет свое право на существование, что
легко подтверждается тем, что каждый из них нашел свое применение в
жизни. Надеюсь этот теоритический обзор дал Вам возможность получить
общее представление о принципах современного обеспечения безопасности
передачи данных через ненадежное пространство, которым в большинстве
случаев является международная сеть Интернет.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Wed, 09 Jan 2008 17:34:00 +0300</pubDate><guid>tag:www.insight-it.ru,2008-01-09:security/2008/bezopasnoe-obshhenie/</guid><category>decrypt</category><category>encrypt</category><category>дешифрование</category><category>ключ</category><category>Криптография</category><category>общение</category><category>протокол</category><category>процесс передачи сообщения</category><category>Сеть</category><category>технология</category><category>цифровая подпись</category><category>шифр</category><category>шифрование</category></item></channel></rss>