<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Insight IT</title><link>https://www.insight-it.ru/</link><description></description><atom:link href="https://www.insight-it.ru/tag/formatirovanie-teksta/feed/index.xml" rel="self"></atom:link><lastBuildDate>Thu, 03 Jan 2008 20:52:00 +0300</lastBuildDate><item><title>Пара простых способов повысить эффективность написания кода</title><link>https://www.insight-it.ru//theory/2008/para-prostyx-sposobov-povysit-effektivnost-napisaniya-koda/</link><description>&lt;p&gt;Начнем, пожалуй, издалека: если рассматривать процесс программирования
чуть более глобально, чем просто как дальний синоним слова
&lt;em&gt;&lt;a href="/tag/koding/"&gt;coding&lt;/a&gt;&lt;/em&gt;, то нетрудно прийти к выводу, что реализация
хоть сколько-нибудь большого проекта невозможна просто с помощью
следования банальному алгоритму: сесть за компьютер, бросить взгляд на
ТЗ, открыть любимый текстовый редактор, взять в зубы клавиатуру и
написать. Если говорить о проектах уровня "Hello, world!" такой алгоритм
вполне пригоден для реального использования, но как только речь заходит
о чем-либо более серьезном и полномасштабным, такой подход сразу
начинает порождать несметное количество проблем.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Основными причинами этого явления я бы назвал ограниченность ресурсов
одного человека и отсутствие какой-либо стандартизации. Количество строк
кода, которые кодер в состоянии писать в единицу времени ограниченно не
только скоростью набора символов на клавиатуре, но и аналитическими
способностями: начиная с какого-то момента человек тупо начинает
забывать где у него находилась, например, та или иная функция или что
значит та или иная переменная / константа.&lt;/p&gt;
&lt;p&gt;Временным спасением от подобного рода проблем может послужить привычка
грамотно оформлять код:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Размещение строго по одному выражению на строке в комбинации с
    поддающимся хоть какой-либо логике расставления отступов в начале
    строки позволяет избежать потерянных выражений и четко понимать: а
    где же заканчивает вон то-о-от цикл?&lt;/li&gt;
&lt;li&gt;Осмысленные названия переменных резко сокращают время, необходимое
    для осознавания ответа на вопрос "а что же она значила?" Мне
    доводилось не раз сталкивался с кодом, написанным с использованием в
    качестве абсолютно всех переменных разнообразных букв латинского
    алфавита - мало того что изменить их на что-либо другое как
    автозаменой, так и RegExp'ами проблематично, так и на разобраться
    что к чему ушло очень продолжительный период времени. Существует
    большое количество более адекватных способов названия переменных и
    функций, перечислять их все смысла не вижу, по-этому кратенько
    расскажу о том, которым предпочитаю пользоваться сам: алгоритм прост
    как три копейки - название соответствует переведенному на английский
    смыслу (переменную, содержащую чье-либо имя называем name), в случае
    если слов требуется более одного слова - пишем их слитно, начиная
    все кроме первого с заглавной буквы (например: veryLongName), и по
    старинной традиции делаем исключение для индексов циклов, которые
    называем буквами латинского алфавита начиная с &lt;em&gt;i&lt;/em&gt; и далее по
    списку. Вот собственно говоря банальный способ, позволяющий в очень
    сжатые сроки вспомнить как называлась переменная, содержащее имя :)&lt;/li&gt;
&lt;li&gt;Подавляющее большинство языков программирования поддерживает
    &lt;em&gt;разбавление&lt;/em&gt; кода комментариями, что существенно упрощает
    ориентирование в &lt;em&gt;объемистых&lt;/em&gt; листингах как самим автором, так и
    всеми остальными персонами, которым по тем или иным причинам
    доведется в последствии читать &lt;em&gt;произведение.&lt;/em&gt; Особенно этот способ
    актуален для низкоуровневых языков программирования, так как с
    первого взгляда на код даже его автору порой проблематично
    определить его значение.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Все вышесказанное хоть и упрощает процесс программирования (хотя в этом
предложении более подходящим является слово &lt;em&gt;&lt;a href="/tag/koding/"&gt;кодинг&lt;/a&gt;&lt;/em&gt;), но
не позволяет избежать большей части потенциальных проблем, связанных с
крупномасштабными проектами. Существует множество способов борьбы с
издержками от масштаба проекта, такие как компонентно-ориентированное и
объектно-ориентированное программирование, различные формы анализа и
проектирования.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Thu, 03 Jan 2008 20:52:00 +0300</pubDate><guid>tag:www.insight-it.ru,2008-01-03:theory/2008/para-prostyx-sposobov-povysit-effektivnost-napisaniya-koda/</guid><category>код</category><category>кодинг</category><category>название переменных</category><category>Программирование</category><category>реализация</category><category>форматирование текста</category></item></channel></rss>