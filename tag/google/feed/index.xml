<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Insight IT</title><link>https://www.insight-it.ru/</link><description></description><atom:link href="https://www.insight-it.ru/tag/google/feed/index.xml" rel="self"></atom:link><lastBuildDate>Sat, 24 Mar 2012 16:50:00 +0400</lastBuildDate><item><title>Архитектура YouTube 2012</title><link>https://www.insight-it.ru//highload/2012/arkhitektura-youtube-2012/</link><description>&lt;blockquote&gt;
&lt;p&gt;Выбирайте самое простое решение с наиболее общими гарантиями, которые
практически полезны.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;- Дао YouTube&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;YouTube&lt;/strong&gt; практически на протяжении всех 7 лет своего существования
является мировым лидером в сфере интернет-видео. С точки зрения
технической реализации проект оказался достаточно консервативным -
команда придерживается того же курса и стека технологий, с которых все
начиналось еще до приобретения проекта &lt;strong&gt;Google&lt;/strong&gt;. Но с 2008 года, когда
я написал первый обзор&amp;nbsp;&lt;a href="https://www.insight-it.ru/highload/2008/arkhitektura-youtube/"&gt;архитектуры YouTube&lt;/a&gt;, все же произошли интересные изменения, о которых я и хотел бы сегодня вкратце рассказать.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="statistika"&gt;Статистика&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4 млрд. просмотров страниц в день&lt;/li&gt;
&lt;li&gt;60 часов видео загружается каждую минуту&lt;/li&gt;
&lt;li&gt;350 миллионов устройств подключено к YouTube&lt;/li&gt;
&lt;li&gt;На февраль 2012 года в США по данным comScore:&lt;ul&gt;
&lt;li&gt;147,4 млн. уникальных зрителей&lt;/li&gt;
&lt;li&gt;16,7 млрд. просмотров видео (в октябре 2011 было больше 20 млрд.)&lt;/li&gt;
&lt;li&gt;Каждый зритель посмотрел в среднем 7 часов видео за месяц&lt;/li&gt;
&lt;li&gt;1.1 млрд. просмотров видео рекламы, суммарной длительностью в 10.8
млн. часов&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tekhnologii"&gt;Технологии&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/tag/linux/"&gt;Linux&lt;/a&gt; - операционная система&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/apache/"&gt;Apache&lt;/a&gt; - основной HTTP-сервер&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/lighttpd/"&gt;lighttpd&lt;/a&gt; - отдача видео из YouTube CDN&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/zookeeper/"&gt;Zookeeper&lt;/a&gt; - распределенные блокировки, хранение
конфигураций&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/tag/python/"&gt;Python&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/tag/wiseguy/"&gt;wiseguy&lt;/a&gt; - FastCGI-прослойка между Apache и Python&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/pycurl/"&gt;pycurl&lt;/a&gt; - лучшая доступная реализация HTTP-клиента,
но в итоге все равно заменили на самописное низкоуровневое решение,
выиграв 8% в потреблении вычислительных ресурсов.&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/spitfire/"&gt;spitfire&lt;/a&gt; - высокопроизводительный шаблонизатор на
основе абстрактного синтаксического дерева с регулируемым уровнем
оптимизации (как в gcc)&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/bson/"&gt;bson&lt;/a&gt; в качестве формата сериализации&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/tag/bigtable/"&gt;BigTable&lt;/a&gt; - хранение изображений&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/mysql/"&gt;MySQL&lt;/a&gt; - используется просто как хранилище данных, версия
5.1.52 с InnoDB&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/vitess/"&gt;Vitess&lt;/a&gt; - система для масштабирования MySQL-кластера&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="vitess"&gt;Vitess&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Основная цель проекта - предоставление всех необходимых инструментов и
серверов для горизонтального масштабирования баз данных на основе MySQL,
с учетом потребностей современных интернет-проектов.&lt;/li&gt;
&lt;li&gt;Реализован на &lt;a href="/tag/go/"&gt;Go&lt;/a&gt; - все еще экзотическом языке
программирования, также родившемся в стенах &lt;a href="/tag/google/"&gt;Google&lt;/a&gt;.
Сравним по производительности с &lt;a href="/tag/c/"&gt;C++&lt;/a&gt; и &lt;a href="/tag/java/"&gt;Java&lt;/a&gt;, но
несколько более "выразителен".&lt;/li&gt;
&lt;li&gt;Опубликован в opensource 24 февраля 2012 года, совсем недавно, так что
&lt;a href="/tag/youtube/"&gt;YouTube&lt;/a&gt; - по-прежнему единственный пример его
использования на практике в крупном проекте.&lt;/li&gt;
&lt;li&gt;Готовые клиентские библиотеки пока только для&amp;nbsp;&lt;strong&gt;Python&lt;/strong&gt;&amp;nbsp;и&amp;nbsp;&lt;strong&gt;Go&lt;/strong&gt;, что
не удивительно, но есть и универсальные интерфейсы на основе HTTP и
просто TCP-сокетов.&lt;/li&gt;
&lt;li&gt;Основной формат данных - &lt;strong&gt;bson&lt;/strong&gt;, как и в &lt;a href="/tag/mongodb/"&gt;MongoDB&lt;/a&gt;, но
по словам разработчиков &lt;em&gt;Vitess&lt;/em&gt;&amp;ensp;&lt;a href="https://www.insight-it.ru/goto/b807d615/" rel="nofollow" target="_blank" title="http://code.google.com/p/vitess/source/browse/#hg%2Fgo%2Fbson"&gt;их
реализация&lt;/a&gt;
выполняет (де)сериализацию в 10-15 раз быстрее.&lt;/li&gt;
&lt;li&gt;Ядром проекта выступает &lt;strong&gt;Vtocc&lt;/strong&gt;, &amp;nbsp;SQL-прокси с RPC интерфейсом,
позволяющий перераспределять запросы от большого количества (более 10
тыс.) одновременно подключенных клиентов в сравнительно небольшое
количество соединений с базами данных. Пропускная способность порядка 10
тыс. запросов в секунду.&lt;/li&gt;
&lt;li&gt;Встроенные возможности &lt;strong&gt;Vtocc&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;парсер и анализатор SQL-запросов для оптимизации их выполнения;&lt;/li&gt;
&lt;li&gt;заполнение типичных запросов переменными с поддержкой кэширования
результатов;&lt;/li&gt;
&lt;li&gt;управление транзакциями и сроками их выполнения ("убивает"
затянувшиеся);&lt;/li&gt;
&lt;li&gt;для каждого пространства ключей (логической таблицы) можно указать
фактор репликации, что создаст необходимое количество второстепенных
баз данных в дополнение к мастеру;&lt;/li&gt;
&lt;li&gt;можно явно указать, что чтение необходимо произвести с мастера
(важно когда пользователь только что выполнил какое-то действие и
должен сразу же увидеть его результат);&lt;/li&gt;
&lt;li&gt;отдельные пулы соединений для выполнения операций чтения и записи;&lt;/li&gt;
&lt;li&gt;исключение "зависших" соединений из пулов;&lt;/li&gt;
&lt;li&gt;перезапуск без простоя системы;&lt;/li&gt;
&lt;li&gt;поддержка DML.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Партиционирование&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Во всех таблицах должна быть колонка с уникальным ключем, на основе
которого данные будут распределяться по кластеру.&lt;/li&gt;
&lt;li&gt;Партиционирование основано на диапазонах ключей, что позволяет держать
"карту" партиций в памяти и очень быстро определять где располагаются те
или иные данные, но обратной стороной медали является вероятное
возникновение "горячих" узлов в кластере, особенно при монотонно
увеличивающихся значениях ключей (рекомендуется использовать случайные).&lt;/li&gt;
&lt;li&gt;Поддерживаются ключи в виде натуральных чисел или произвольных бинарных
данных.&lt;/li&gt;
&lt;li&gt;При высокой нагрузке на одну партицию она может быть распределена на две
путем фильтрованной репликации; в дальнейшем планируется реализовать и
обратный процесс.&lt;/li&gt;
&lt;li&gt;Еще в планах:&lt;ul&gt;
&lt;li&gt;Поэтапное внесение изменений в схему данных без видимого простоя
системы;&lt;/li&gt;
&lt;li&gt;Поддержка работы в нескольких датацентрах с концентрацией
мастер-серверов в одном датацентре и использования остальных в
режиме только для чтения.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="podvodim-itogi"&gt;Подводим итоги&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt; - еще один проект мирового масштаба, который с самого начала
использовал MySQL и оказался не в силах от него отказаться, не смотря на
трудности с горизонтальным масштабированием.&lt;/li&gt;
&lt;li&gt;По аналогичному пути пошли и другие проекты, схожие с &lt;strong&gt;Vitess&lt;/strong&gt;
надстройки над MySQL используются в &lt;a href="https://www.insight-it.ru/highload/2010/arkhitektura-facebook/"&gt;Facebook&lt;/a&gt; и &lt;a href="https://www.insight-it.ru/highload/2011/arkhitektura-twitter-dva-goda-spustya/"&gt;Twitter&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;В &lt;a href="/tag/facebook/"&gt;Facebook&lt;/a&gt; она дополнена сильной интеграцией с
&lt;a href="/tag/memcached/"&gt;memcached&lt;/a&gt;&amp;nbsp;и сильно ограниченным интерфейсом, не
имеющим практически ничего общего с SQL.&amp;nbsp;Планы о публикации в
opensource, кажется, были, но я не слышал чтобы они воплотились в
жизнь. &lt;em&gt;// Уже почти дописав статью случайно заметил в коде, а потом
и мелким шрифтом в документации, что в Vitess тоже используется
memcached для кэширования из-за проблем со сборщиком мусора Go.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/twitter/"&gt;Twitter&lt;/a&gt;&amp;nbsp;по-прежнему использует свою связку
&lt;a href="https://www.insight-it.ru/goto/4fe0530b/" rel="nofollow" target="_blank" title="https://github.com/twitter/flockdb"&gt;FlockDB&lt;/a&gt; +
&lt;a href="https://www.insight-it.ru/goto/c4275cdf/" rel="nofollow" target="_blank" title="https://github.com/twitter/gizzard"&gt;Gizzard&lt;/a&gt;&amp;nbsp;на
&lt;a href="/tag/scala/"&gt;Scala&lt;/a&gt;, которые уже пару лет публично доступны. В
отличии от Vitess она заточена на хранение информации о социальных
графах, по-этому сфера её применения как в Twitter, так и за его
пределами ограничена.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vitess - пожалуй первая относительно успешная попытка построить
распределенную горизонтально масштабируемую СУБД на основе реляционной
базы данных, сохранив при этом SQL-интерфейс, пускай и с некоторыми
ограничениями.&lt;/li&gt;
&lt;li&gt;Выбирайте подходящее хранилище для каждого типа данных в системе - если
Vitess стал подходящим решением для структурированных данных вроде
информации о пользователях, метаданных видео и комментариев, это не
значит, что он хорошо (или плохо) справится, например, с медиа-файлами
вроде изображений и видео (для них в
&lt;a href="/tag/youtube/"&gt;YouTube&lt;/a&gt;&amp;nbsp;по-прежнему используют стек технологий
&lt;a href="/tag/google/"&gt;Google&lt;/a&gt;, подробности не публикуются).&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/python/"&gt;Python&lt;/a&gt; - вполне пригодный инструмент для реализации
бизнес-логики интернет-проектов, свет клином на &lt;a href="/tag/php/"&gt;PHP&lt;/a&gt; не
сошелся. Python предлагает широкий ассортимент инструментов для решения
любых типичных для интернет-проектов задач, хотя субъективно выбор
некоторых из них разработчиками YouTube мне кажется странным.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="card light-blue lighten-5"&gt;
&lt;div class="card-content"&gt;
        В комментариях предлагаю обсудить слабые и сильные стороны использования
        надстроек над реляционными базами данных, скажем по сравнению с
        использованием изначально-распределенных СУБД, таких как Riak, Cassandra
        и многих других. Может быть кто-то уже успел прикрутить к своему проекту
        Vitess или хотя бы FlockDB и готов поделиться впечатлениями?
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="istochniki-informatsii"&gt;Источники информации&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/fb446b63/" rel="nofollow" target="_blank" title="https://www.youtube.com/watch?v=G-lGCC4KKok"&gt;Mike Solomon на PyCon'12&lt;/a&gt; (один из первых
    разработчиков проекта)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/29524853/" rel="nofollow" target="_blank" title="http://code.google.com/p/vitess"&gt;О проекте Vitess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/652a935e/" rel="nofollow" target="_blank" title="http://www.comscore.com/Press_Events/Press_Releases/2012/3/comScore_Releases_February_2012_U.S._Online_Video_Rankings"&gt;Статистика comScore на февраль '12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Sat, 24 Mar 2012 16:50:00 +0400</pubDate><guid>tag:www.insight-it.ru,2012-03-24:highload/2012/arkhitektura-youtube-2012/</guid><category>bson</category><category>Go</category><category>Google</category><category>lighttpd</category><category>Linux</category><category>MySQL</category><category>pycurl</category><category>Python</category><category>spitfire</category><category>Vitess</category><category>wiseguy</category><category>YouTube</category><category>ZooKeeper</category></item><item><title>Архитектура Google 2011</title><link>https://www.insight-it.ru//highload/2011/arkhitektura-google-2011/</link><description>&lt;p&gt;&lt;a href="https://www.insight-it.ru/highload/2008/arkhitektura-google/"&gt;Архитектура Google&lt;/a&gt;
была одной из первых статьей на &lt;strong class="trebuchet"&gt;Insight IT&lt;/strong&gt;. Именно она дала толчок развитию проекта: после её публикации посещаемость блога увеличилась в десятки раз и появились первые сотни подписчиков. Прошли годы, информация устаревает стремительно, так что пришло время взглянуть на Google еще раз, теперь уже с позиции конца 2011 года. Что мы увидим нового в архитектуре интернет-гиганта?
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id="statistika"&gt;Статистика&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Общее&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Ежедневная аудитория Google составляет около 1 миллиарда
    человек&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;По данным Alexa больше половины аудитории интернета каждый
    день пользуются Google&lt;/li&gt;
&lt;li&gt;По данным IWS аудитория интернета составляет 2.1 миллиарда
    человек&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Используется более 900 тысяч серверов&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Планируется расширение до 10 миллионов серверов в обозримом
    будущем&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/4cb67b65/" rel="nofollow" target="_blank" title="http://www.google.com/about/datacenters/locations/index.html"&gt;12 основных датацентров в США&lt;/a&gt;,
    присутствие в большом количестве точек по всему миру (более 38)&lt;/li&gt;
&lt;li&gt;Около 32 тысяч сотрудников в 76 офисах по всему миру&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Поиск&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;За последние 14 лет среднее время обработки одного поискового
    запроса уменьшилось с 3 секунд до менее 100 миллисекунд, то есть
    в 30 раз&lt;/li&gt;
&lt;li&gt;Более 40 миллиардов страниц в индексе, если приравнять каждую к
    листу А4 они бы покрыли территорию США в 5 слоев&lt;/li&gt;
&lt;li&gt;Более 1 квинтиллиона уникальных URL (10 в 18 степени); если
    распечатать их в одну строку, её длина составит 51 миллион
    километров, треть расстояния от Земли до Солнца&lt;/li&gt;
&lt;li&gt;В интернете встречается примерно 100 квинтиллионов слов, чтобы
    набрать их на клавиатуре одному человеку потребовалось бы
    примерно 5 миллионов лет&lt;/li&gt;
&lt;li&gt;Проиндексировано более 1.5 миллиардов изображений, чтобы их
    сохранить потребовалось бы 112 миллионов дискет, которые можно
    сложить в стопку высотой 391 километр&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gmail&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Активных пользователей более 170 миллионов&lt;/li&gt;
&lt;li&gt;Второй по популярности почтовый сервис в США, третий в мире (по
    данным comScore)&lt;/li&gt;
&lt;li&gt;При текущем темпе роста аудитории GMail и конкурентов, он станет
    лидером рынка через 2-3 года&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google+&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Более 40 миллионов пользователей на октябрь 2011, при запуске в
    июне 2011&lt;/li&gt;
&lt;li&gt;25 миллионов пользователей за первый месяц&lt;/li&gt;
&lt;li&gt;70:30 примерное соотношение мужчин и женщин&lt;/li&gt;
&lt;li&gt;Себестоимость разработки больше полумиллиарда долларов&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Загружается более 13 миллионов часов видео в год&lt;/li&gt;
&lt;li&gt;Каждую минуту загружается 48 часов видео, что соответствует
    почти 8 годам контента или 52 тысячам полнометражных фильмов в
    день&lt;/li&gt;
&lt;li&gt;Более 700 миллиардов просмотров видео в год&lt;/li&gt;
&lt;li&gt;Месячная аудитория составляет 800 миллионов уникальных
    посетителей&lt;/li&gt;
&lt;li&gt;Несколько тысяч полнометражных фильмов в &lt;a href="https://www.insight-it.ru/goto/18cd7d94/" rel="nofollow" target="_blank" title="http://www.youtube.com/movies"&gt;YouTube Movies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Более 10% всех видео в формате HD&lt;/li&gt;
&lt;li&gt;13% просмотров (400 миллионов в день) происходит с мобильных
    устройств&lt;/li&gt;
&lt;li&gt;До сих пор работает в убыток, лишь 14% просмотров видео приносят
    выручку с рекламы&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Финансы&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Выручка порядка 36 миллиардов долларов в год&lt;/li&gt;
&lt;li&gt;Прибыль после налогов порядка 10 миллиардов долларов в год&lt;/li&gt;
&lt;li&gt;Капитализация порядка 200 миллиардов долларов&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="arkhitektura"&gt;Архитектура&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Google&lt;/strong&gt; - огромная интернет-компания, неоспоримый лидер на рынке
поиска в Интернет и владелец большого количества продуктов, многие из
которых также добились определенного успеха в своей нише.&lt;/p&gt;
&lt;p&gt;В отличии от большинства интернет-компаний, которые занимаются лишь
одним продуктом (проектом), архитектура Google не может быть
представлена как единое конкретное техническое решение. Сегодня мы
скорее будем рассматривать общую стратегию технической реализации
интернет-проектов в Google, возможно слегка затрагивая и другие аспекты
ведения бизнеса в Интернет.&lt;/p&gt;
&lt;p&gt;Все продукты Google основываются на постоянно развивающейся программной
платформе, которая спроектирована с учетом работы на миллионах серверов,
находящихся в разных датацентрах по всему миру.&lt;/p&gt;
&lt;h3 id="oborudovanie"&gt;Оборудование&lt;/h3&gt;
&lt;p&gt;Обеспечение работы миллиона серверов и расширение их парка - одна из
ключевых статей расходов Google. Для минимизации этих издержек очень
большое внимание уделяется эффективности используемого серверного,
сетевого и инфраструктурного оборудования.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Использование энергии" class="right" src="https://www.insight-it.ru/images/dc-home-energy-use.png" title="Использование энергии"/&gt;&lt;/p&gt;
&lt;p&gt;В традиционных датацентрах потребление электричества серверами примерно
равно его потреблению остальной инфраструктурой, Google же удалось
снизить процент использования дополнительной электроэнергии до 14%.
Таким образом суммарное энергопотребление датацентром Google сравнимо с
потреблением только серверов в типичном датацентре и вдвое меньше его
общего энергопотребления. Основные концепции, которые используются для
достижения этого результата:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Точное измерение потребления электроэнергии всеми компонентами
    позволяет определить возможности по его уменьшению;&lt;/li&gt;
&lt;li&gt;В датацентрах Google тепло, что позволяет экономить на охлаждении;&lt;/li&gt;
&lt;li&gt;При проектировании датацентра уделяется внимание даже незначительным
    деталям, позволяющим сэкономить даже немного - при таком масштабе
    это окупается;&lt;/li&gt;
&lt;li&gt;Google умеет охлаждать датацентры практически без кондиционеров, с
    использованием воды и её испарения &lt;em&gt;(см. &lt;a href="https://www.insight-it.ru/goto/d1cf5d6b/" rel="nofollow" target="_blank" title="http://www.youtube.com/watch?v=VChOEvKicQQ"&gt;как это реализовано&lt;/a&gt; в Финляндии)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В Google активно&amp;nbsp;пропагандируют максимальное использование
возобновляемой энергии. Для этого заключаются долгосрочные соглашения с
её поставщиками (на 20 и более лет), что позволяет отрасли активно
развиваться и наращивать мощности. Проекты по генерации возобновляемой
энергии, спонсируемые Google, имеют суммарную мощность более 1.7
гигаватт, что существенно больше, чем используется для работы Google.
Этой мощности хватило бы для обеспечения электричеством 350 тысяч домов.&lt;/p&gt;
&lt;p&gt;Если говорить о жизненном цикле оборудования, то используются следующие
принципы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Уменьшение транспортировки:&lt;/strong&gt; там, где это возможно, тяжелые
    компоненты (вроде серверных стоек) закупаются у местных поставщиков,
    даже если в других местах аналогичный товар можно было бы купить
    дешевле.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Повторное использование:&lt;/strong&gt; прежде, чем покупать новое оборудование
    и материалы, рассматриваются возможности по использованию уже
    имеющихся. Этот принцип помог избежать покупки более 90 тысяч новых
    серверов.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Утилизация&lt;/strong&gt;: в тех случаях, когда повторное использование
    невозможно, оборудование полностью очищается от данных и продается
    на вторичном рынке. То, что не удается продать, разбирается на
    материалы (медь, сталь, алюминий, пластик и.т.п.) для последующей
    правильной утилизации специализированными компаниями.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google известны за свои эксперименты и необычные решения в области
серверного оборудования и инфраструктуры. Некоторые запатентованы;
какие-то прижились, какие-то - нет. Подробно останавливаться на них не
буду, лишь вкратце о некоторых:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Резервное питание, интегрированное в блок питания
    &lt;a href="https://www.insight-it.ru/goto/ca5b8b43/" rel="nofollow" target="_blank" title="http://www.youtube.com/watch?v=xgRWURIxgbU"&gt;сервера&lt;/a&gt;, обеспеченное
    стандартными 12V батарейками;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/c7f3ff41/" rel="nofollow" target="_blank" title="http://www.datacenterknowledge.com/closer-look-googles-server-sandwich-design/"&gt;"Серверный сендвич"&lt;/a&gt;,
    где материнские платы с двух сторон окружают водяную систему
    теплоотвода в центре стойки;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/8dc33e81/" rel="nofollow" target="_blank" title="http://www.youtube.com/watch?v=zRwPSFpLX8I"&gt;Датацентр из контейнеров&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В заключении этого раздела хотелось бы взглянуть правде в глаза:
&lt;strong&gt;идеального оборудования не бывает&lt;/strong&gt;. У любого современного устройства,
будь то сервер, коммутатор или маршрутизатор, есть шанс прийти в
негодность из-за производственного брака, случайного стечения
обстоятельств или других внешних факторов. Если умножить этот, казалось
бы, небольшой шанс на количество оборудования, которое используется в
Google, то окажется, что чуть ли не каждую минуту из строя выходит одно,
или несколько, устройств в системе. На оборудование полагаться нельзя,
по-этому вопрос отказоустойчивости переносится на плечи программной
платформы, которую мы сейчас и рассмотрим.&lt;/p&gt;
&lt;h3 id="platforma"&gt;Платформа&lt;/h3&gt;
&lt;p&gt;В Google очень рано столкнулись с проблемами ненадежности оборудования и
работы с огромными массивами данных. Программная платформа,
спроектированная для работы на многих недорогих серверах, позволила им
абстрагироваться от сбоев и ограничений одного сервера.&lt;/p&gt;
&lt;p&gt;Основными задачами в ранние годы была минимизация точек отказа и
обработка больших объемов слабоструктурированных данных. Решением этих
задач стали три основных слоя платформы Google, работающие один поверх
другого:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.insight-it.ru/goto/479dfa95/" rel="nofollow" target="_blank" title="http://research.google.com/archive/gfs.html"&gt;Google File System&lt;/a&gt;:&lt;/strong&gt;
    распределенная файловая система, состоящая из сервера с метаданными
    и теоретически неограниченного количества серверов, хранящих
    произвольные данные в блоках фиксированного размера.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.insight-it.ru/goto/f56e059a/" rel="nofollow" target="_blank" title="http://research.google.com/archive/bigtable.html"&gt;BigTable&lt;/a&gt;:&lt;/strong&gt;
    распределенная база данных, использующая для доступа к данным две
    произвольных байтовых строки-ключа (обозначающие строку и столбец) и
    дату/время (обеспечивающие версионность).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.insight-it.ru/goto/dbd8fea6/" rel="nofollow" target="_blank" title="http://research.google.com/archive/mapreduce.html"&gt;MapReduce&lt;/a&gt;:&lt;/strong&gt;
    механизм распределенной обработки больших объемов данных,
    оперирующий парами ключ-значение для получения требуемой информации.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Такая комбинация, дополненная другими технологиями, довольно долгое
время позволяла справляться с индексацией Интернета, пока... скорость
появления информации в Интернете не начала расти огромными темпами из-за
"бума социальных сетей". Информация, добавленная в индекс даже через
полчаса, уже зачастую становилась устаревшей.&amp;nbsp;В дополнение к этому в
рамках самого Google стало появляться все больше продуктов,
предназначенных для работы в реальном времени.&lt;/p&gt;
&lt;p&gt;Спроектированные с учетом совершенно других требований Интернета
пятилетней давности компоненты, составляющие ядро платформы Google,
потребовали фундаментальной смены архитектуры индексации и поиска,
который около года назад был представлен публике&amp;nbsp;под кодовым названием
&lt;strong&gt;Google Caffeine&lt;/strong&gt;. Новые, переработанные, версии старых "слоев" также
окрестили броскими именами, но резонанса у технической публики они
вызвали намного меньше, чем новый поисковый алгоритм в SEO-индустрии.&lt;/p&gt;
&lt;h4&gt;Google Colossus&lt;/h4&gt;
&lt;p&gt;Новая архитектура GFS была спроектирована для минимизации задержек при
доступе к данным (что критично для приложений вроде GMail и YouTube), не
в ущерб основным свойствам старой версии: отказоустойчивости и
прозрачной масштабируемости.&lt;/p&gt;
&lt;p&gt;В оригинальной же реализации упор был сделан на повышение общей
пропускной способности: операции объединялись в очереди и выполнялись
разом, при таком подходе можно было прождать пару секунд еще до того,
как первая операция в очереди начнет выполняться. Помимо этого в старой
версии было большое слабое место в виде единственно мастер-сервера с
метаданными, сбой в котором грозил недоступностью всей файловой системы
в течении небольшого промежутка времени (пока другой сервер не подхватит
его функции, изначально это занимало около 5 минут, в последних версиях
порядка 10 секунд) - это также было вполне допустимо при отсутствии
требования работы в реальном времени, но для приложений, напрямую
взаимодействующих с пользователями, это было неприемлемо с точки зрения
возможных задержек.&lt;/p&gt;
&lt;p&gt;Основным нововведением в Colossus стали распределенные мастер-сервера,
что позволило избавиться не только от единственной точки отказа, но и
существенно уменьшить размер одного блока с данными (с 64 до 1
мегабайта), что в целом очень положительно сказалось на работе с
небольшими объемами данных. В качестве бонуса исчез теоретический предел
количества файлов в одной системе.&lt;/p&gt;
&lt;p&gt;Детали распределения ответственности между мастер-серверами, сценариев
реакции на сбои, а также сравнение по задержкам и пропускной
способности обоих версий, к сожалению, по-прежнему конфиденциальны. Могу
предположить, что используется вариация на тему хэш-кольца с репликацией
метаданных на ~3 мастер-серверах, с созданием дополнительной копии на
следующем по кругу сервере в случае в случае сбоев, но это лишь догадки.
Если у кого-то есть относительно официальная информация на этот счет -
буду рад увидеть в комментариях.&lt;/p&gt;
&lt;p&gt;По прогнозам Google текущий вариант реализации распределенной файловой
системы "уйдет на пенсию" в 2014 году из-за популяризации твердотельных
накопителей и существенного скачка в области вычислительных технологий
(процессоров).&lt;/p&gt;
&lt;h4&gt;Google Percolator&lt;/h4&gt;
&lt;p&gt;MapReduce отлично справлялся с задачей полной перестройки поискового
индекса, но не предусматривал небольшие изменения, затрагивающие лишь
часть страниц. Из-за потоковой, последовательной природы MapReduce для
внесения изменений в небольшую часть документов все равно пришлось бы
обновлять весь индекс, так как новые страницы непременно будут каким-то
образом связаны со старыми. Таким образом задержка между появлением
страницы в Интернете и в поисковом индексе при использовании MapReduce
была пропорциональна общему размеру индекса (а значит и Интернета,
который постоянно растет), а не размеру набора измененных документов.&lt;/p&gt;
&lt;p&gt;Ключевые архитектурные решения, лежащие в основе MapReduce, не позволяли
повлиять на эту особенность и в итоге система индексации была построена
заново с нуля, а MapReduce продолжает использоваться в других проектах
Google для аналитики и прочих задач, по прежнему не связанных с реальным
временем.&lt;/p&gt;
&lt;p&gt;Новая система получила довольно своеобразное название &lt;strong&gt;Percolator&lt;/strong&gt;,
попытки узнать что оно значит приводит к различным устройствам по
фильтрации дыма, кофеваркам и непойми чему еще. Но наиболее адекватное
объяснение мне пришло в голову, когда я прочитал его по слогам: per
col - &lt;em&gt;по колонкам&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Percolator представляет собой надстройку над BigTable, позволяющую
выполнять комплексные вычисления на основе имеющихся данных,
затрагивающие много строк и даже таблиц одновременно (в стандартном API
BigTable это не предусмотрено).&lt;/p&gt;
&lt;p&gt;Веб-документы или любые другие данные изменяются/добавляются в систему
посредством модифицированного API BigTable, а дальнейшие изменения в
остальной базе осуществляются посредством механизма&amp;nbsp;"обозревателей".
Если говорить в терминах реляционных СУБД, то обозреватели - что-то
среднее между триггерами и хранимыми процедурами. Обозреватели
представляют собой подключаемый к базе данных код (на &lt;a href="/tag/c/"&gt;C++&lt;/a&gt;),
который исполняется в случае возникновении изменений в определенных
&lt;em&gt;колонках&lt;/em&gt; BigTable (откуда, видимо, и пошло название). Все используемые
системой метаданные также хранятся в специальных колонках BigTable. При
использовании Percolator все изменения происходят в транзакциях,
удовлетворяющих принципу ACID, каждая из которых затрагивает именно те
сервера в кластере, на которых необходимо внести изменения. Механизм
транзакций на основе BigTable разрабатывался в рамках отдельного проекта
под названием &lt;a href="https://www.insight-it.ru/storage/2011/google-megastore/"&gt;Google Megastore&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Таким образом, при добавлении нового документа (или его версии) в
поисковый индекс, вызывается цепная реакция изменений в старых
документах, скорее всего ограниченная по своей рекурсивности. Эта
система при осуществлении случайного доступа поддерживает индекс в
актуальном состоянии.&lt;/p&gt;
&lt;p&gt;В качестве бонуса в этой схеме удалось избежать еще двух недостатков
MapReduce:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Проблемы "отстающих":&lt;/strong&gt; когда один из серверов (или одна из
    конкретных подзадач) оказывался существенно медленнее остальных, что
    также значительно задерживало общее время завершения работы
    кластера.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Пиковая нагрузка:&lt;/strong&gt; MapReduce не является непрерывным процессом, а
    разделяется на работы с ограниченной целью и временем исполнения.
    Таким образом помимо необходимости ручной настройки работ и их
    типов, кластер имеет очевидные периоды простоя и пиковой нагрузки,
    что ведет к неэффективному использованию вычислительных ресурсов.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Но все это оказалось не бесплатно: при переходе на новую систему удалось
достичь той же скорости индексации, но при этом использовалось &lt;em&gt;вдвое&lt;/em&gt;
больше вычислительных ресурсов. Производительность Percolator находится
где-то между производительностью MapReduce и производительностью
традиционных СУБД. Так как Percolator является распределенной системой,
для обработки фиксированного небольшого количества данных ей приходится
использовать существенно больше ресурсов, чем традиционной СУБД; такова
цена масштабируемости. По сравнению с MapReduce также пришлось платить
дополнительными потребляемыми вычислительными ресурсами за возможность
случайного доступа с низкой задержкой.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Google Percolator Benchmark" class="left" src="https://www.insight-it.ru/images/google-percolator-benchmark.png" title="Google Percolator Benchmark"/&gt;&lt;/p&gt;
&lt;p&gt;Тем не менее, при выбранной архитектуре Google удалось достичь
практически линейного масштабирования при увеличении вычислительных
мощностей на много порядков &lt;em&gt;(см. график, основан на тесте TPC-E)&lt;/em&gt;.
Дополнительные накладные расходы, связанные с распределенной природой
решения, в некоторых случаях до 30 раз превосходят аналогичный
показатель традиционных СУБД, но у данной системы есть солидный простор
для оптимизации в этом направлении, чем Google активно и занимается.&lt;/p&gt;
&lt;h4&gt;Google Spanner&lt;/h4&gt;
&lt;p&gt;Spanner представляет собой единую систему автоматического управления
ресурсами &lt;strong&gt;всего парка серверов&lt;/strong&gt; Google.&lt;/p&gt;
&lt;p&gt;Основные особенности:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Единое пространство имен:&lt;ul&gt;
&lt;li&gt;Иерархия каталогов&lt;/li&gt;
&lt;li&gt;Независимость от физического расположения данных&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Поддержка слабой и сильной целостности данных между датацентрами&lt;/li&gt;
&lt;li&gt;Автоматизация:&lt;ul&gt;
&lt;li&gt;Перемещение и добавление реплик данных&lt;/li&gt;
&lt;li&gt;Выполнение вычислений с учетом ограничений и способов
    использования&lt;/li&gt;
&lt;li&gt;Выделение ресурсов на всех доступных серверах&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Зоны полу-автономного управления&lt;/li&gt;
&lt;li&gt;Восстановление целостности после потерь соединения между
    датацентрами&lt;/li&gt;
&lt;li&gt;Возможность указания пользователями высокоуровневых требований,
    например:&lt;ul&gt;
&lt;li&gt;99% задержек при доступе к этим данным должны быть до 50 мс&lt;/li&gt;
&lt;li&gt;Расположи эти данные на как минимум 2 жестких дисках в Европе, 2
    в США и 1 в Азии&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Интеграция не только с серверами, но и с сетевым оборудованием, а
    также системами охлаждения в датацентрах&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Проектировалась из расчета на:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-10 миллионов серверов&lt;/li&gt;
&lt;li&gt;~10 триллионов директорий&lt;/li&gt;
&lt;li&gt;~1000 петабайт данных&lt;/li&gt;
&lt;li&gt;100-1000 датацентров по всему миру&lt;/li&gt;
&lt;li&gt;~1 миллиард клиентских машин&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Об этом проекте Google известно очень мало, официально он был
представлен публике лишь однажды в 2009 году, с тех пор лишь местами
упоминался сотрудниками без особой конкретики. Точно не известно
развернута ли эта система на сегодняшний день и если да, то в какой
части датацентров, а также каков статус реализации заявленного
функционала.&lt;/p&gt;
&lt;h4&gt;Прочие компоненты платформы&lt;/h4&gt;
&lt;p&gt;Платформа Google в конечном итоге сводится к набору сетевых сервисов и
библиотек для доступа к ним из различных языков программирования (в
основном используются&amp;nbsp;&lt;a href="/tag/c/"&gt;C/C++&lt;/a&gt;,&amp;nbsp;&lt;a href="/tag/java/"&gt;Java&lt;/a&gt;,&amp;nbsp;&lt;a href="/tag/python/"&gt;Python&lt;/a&gt; и&amp;nbsp;&lt;a href="/tag/perl/"&gt;Perl&lt;/a&gt;). Каждый продукт, разрабатываемый Google, в большинстве случаев использует эти библиотеки для осуществления доступа к данным, выполнения комплексных вычислений и других задач, вместо стандартных механизмов, предоставляемых операционной системой, языком программирования или opensource библиотеками.&lt;/p&gt;
&lt;p&gt;Вышеизложенные проекты составляют лишь основу платформы Google, хотя она
включает в себя куда больше готовых решений и библиотек, несколько
примеров из публично доступных проектов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/f5686a9/" rel="nofollow" target="_blank" title="http://code.google.com/webtoolkit/"&gt;GWT&lt;/a&gt; для реализации
    пользовательских интерфейсов на &lt;a href="/tag/java/"&gt;Java&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/7f9cb797/" rel="nofollow" target="_blank" title="http://code.google.com/closure/"&gt;Closure&lt;/a&gt; - набор инструментов для
    работы с &lt;a href="/tag/javascript/"&gt;JavaScript&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/41604156/" rel="nofollow" target="_blank" title="http://code.google.com/apis/protocolbuffers/"&gt;Protocol Buffers&lt;/a&gt; -
    не зависящий от языка программирования и платформы формат бинарной
    сериализации структурированных данных, используется при
    взаимодействии большинства компонентов системы внутри Google;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/bb496d06/" rel="nofollow" target="_blank" title="http://code.google.com/p/leveldb/"&gt;LevelDB&lt;/a&gt; -
    высокопроизводительная встраиваемая &lt;a href="/tag/subd/"&gt;СУБД&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/44c46d8/" rel="nofollow" target="_blank" title="http://code.google.com/p/snappy/"&gt;Snappy&lt;/a&gt; - быстрая компрессия
    данных, используется при хранении данных в GFS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="podvodim-itogi_1"&gt;Подводим итоги&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Стабильные, проработанные и повторно используемые базовые
    компоненты проекта&lt;/strong&gt; &lt;em&gt;- залог её стремительного развития, а также
    создания новых проектов на той же кодовой базе&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Если задачи и обстоятельства, с учетом которых проектировалась
    система, существенно изменились&amp;nbsp;&lt;em&gt;- не бойтесь вернуться на стадию проектирования и реализовать новое решение&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Используйте инструменты, подходящие для решения каждой конкретной
    задачи&lt;/em&gt;, а не те, которые навязывает мода или привычки участников
    команды.&lt;/li&gt;
&lt;li&gt;Даже, казалось бы, незначительные недоработки и допущения на большом
    масштабе могут вылиться в огромные потери &lt;em&gt;- уделяйте максимум
    внимания деталям при реализации проекта.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Нельзя полагаться даже на очень дорогое оборудование &lt;em&gt;- все ключевые
    сервисы должны работать минимум на двух серверах, в том числе и базы
    данных.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Распределенная платформа, общая для всех проектов, позволит новым
    разработчикам легко вливаться в работу над конкретными продуктами, с
    минимумом представления о внутренней архитектуре компонентов
    платформы.&lt;/li&gt;
&lt;li&gt;Прозрачная работа приложений в нескольких датацентрах - одна из
    самых тяжелых задач, с которыми сталкиваются интернет-компании.
    Сегодня каждая из них решает её по-своему и держит подробности в
    секрете, что сильно замедляет развитие opensource решений.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="istochniki-informatsii"&gt;Источники информации&lt;/h2&gt;
&lt;p&gt;Не гарантирую достоверность всех нижеизложенных источников информации,
ставших основой для данной статьи, но ввиду конфиденциальности подобной
информации на большее рассчитывать не приходится.&lt;/p&gt;
&lt;p&gt;Поправки и уточнения приветствуются :)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/4431029a/" rel="nofollow" target="_blank" title="http://www.google.com/about/datacenters/index.html"&gt;Official Google Data Centers
    Site&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/7437fe8a/" rel="nofollow" target="_blank" title="http://research.google.com/people/jeff/WSDM09-keynote.pdf"&gt;Challenges in Building Large-Scale Information Retrieval
    Systems&lt;/a&gt;
    (Jeff Dean, WCDMA '09)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/557e7b3d/" rel="nofollow" target="_blank" title="https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf"&gt;Designs, Lessons and Advice from Building Large Distributed
    Systems&lt;/a&gt;
    (Jeff Dean, Ladis '09)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/6ec4bc06/" rel="nofollow" target="_blank" title="http://research.google.com/pubs/pub36726.html"&gt;Google Percolator official
    paper&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/3473b129/" rel="nofollow" target="_blank" title="http://research.google.com/pubs/pub36971.html"&gt;&lt;em&gt;Google Megastore official
    paper&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/dd8bec64/" rel="nofollow" target="_blank" title="http://www.theregister.co.uk/2010/09/24/google_percolator/"&gt;Google
    Percolator&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/82efffd8/" rel="nofollow" target="_blank" title="http://www.theregister.co.uk/2010/09/09/google_caffeine_explained/"&gt;Google Caffeine
    Explained&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/63b6ec67/" rel="nofollow" target="_blank" title="http://www.theregister.co.uk/2009/10/23/google_spanner/"&gt;Google
    Spanner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/46520ede/" rel="nofollow" target="_blank" title="http://www.theregister.co.uk/2011/06/08/google_software_infrastructure_dubbed_obsolete_by_ex_employee/"&gt;Google Software Infrastructure Dubbed Obsolete by
    ex-Employee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/49879386/" rel="nofollow" target="_blank" title="http://www.theregister.co.uk/2011/06/23/google_moves_off_the_google_file_system/"&gt;Google Moves Off the Google File
    System&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Google Internet Stats&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/d11024ba/" rel="nofollow" target="_blank" title="http://www.businessblogshub.com/2010/10/google-statistics-yes-they-are-very-big/"&gt;Google
    Statistics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/bb33b2dd/" rel="nofollow" target="_blank" title="http://www.splashnology.com/article/google-plus-killer-facts-and-statistics-inforgaphics/2689/"&gt;Google Plus - Killer Facts and
    Statistics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/d20404a7/" rel="nofollow" target="_blank" title="http://www.youtube.com/t/press_statistics"&gt;YouTube statistics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/9909f6c8/" rel="nofollow" target="_blank" title="http://www.alexa.com/siteinfo/google.com"&gt;&lt;em&gt;Alexa on Google&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/b088e740/" rel="nofollow" target="_blank" title="http://www.internetworldstats.com/stats.htm"&gt;&lt;em&gt;Internet World
    Stats&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/86a009d0/" rel="nofollow" target="_blank" title="http://www.google.com/finance?fstype=bi&amp;amp;cid=694653"&gt;Google Inc.
    financials&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/2515e26d/" rel="nofollow" target="_blank" title="http://www.geekwire.com/2011/stats-hotmail-top-worldwide-gmail-posts-big-gains"&gt;Hotmail still on top worldwide; Gmail gets
    bigger&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/2428f635/" rel="nofollow" target="_blank" title="http://www.datacenterknowledge.com/archives/2011/08/01/report-google-uses-about-900000-servers/"&gt;&lt;em&gt;Google Server
    Count&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/b6d09313/" rel="nofollow" target="_blank" title="http://www.datacenterknowledge.com/archives/2009/10/20/google-envisions-10-million-servers/"&gt;Google Envisions 10 Million
    Servers&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/bb3d77a4/" rel="nofollow" target="_blank" title="http://www.datacenterknowledge.com/archives/2008/03/27/google-data-center-faq/"&gt;&lt;em&gt;Google Data Center
    FAQ&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bonus-tipichnyi-pervyi-god-klastera-v-google"&gt;Бонус: типичный первый год кластера в Google&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;~1/2 перегрева (большинство серверов выключаются в течении 5 минут,
    1-2 дня на восстановление)&lt;/li&gt;
&lt;li&gt;~1 отказ распределителя питания (~500-1000 резко пропадают, ~6
    часов на восстановление)&lt;/li&gt;
&lt;li&gt;~1 передвижение стойки (много передвижений, 500-100 машин, 6 часов)&lt;/li&gt;
&lt;li&gt;~1 перепрокладка сети (последовательной отключение ~5% серверов на
    протяжении 2 дней)&lt;/li&gt;
&lt;li&gt;~20 отказов стоек (40-80 машин мгновенно исчезают, 1-6 часов на
    восстановление)&lt;/li&gt;
&lt;li&gt;~5 стоек становится нестабильными (40-80 машин сталкиваются с 50%
    потерей пакетов)&lt;/li&gt;
&lt;li&gt;~8 запланированных технических работ с сетью (при четырех могут
    случаться случайные получасовые потери соединения)&lt;/li&gt;
&lt;li&gt;~12 перезагрузок маршрутизаторов (потеря DNS и внешних виртуальных
    IP на несколько минут)&lt;/li&gt;
&lt;li&gt;~3 сбоя маршрутизаторов (восстановление в течении часа)&lt;/li&gt;
&lt;li&gt;Десятки небольших 30-секундных пропаданий DNS&lt;/li&gt;
&lt;li&gt;~1000 сбоев конкретных серверов (~3 в день)&lt;/li&gt;
&lt;li&gt;Много тысяч сбоев жестких дисков, проблем с памятью, ошибок
    конфигурации и т.п.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Mon, 28 Nov 2011 01:32:00 +0400</pubDate><guid>tag:www.insight-it.ru,2011-11-28:highload/2011/arkhitektura-google-2011/</guid><category>BigTable</category><category>Caffeine</category><category>Closure</category><category>GFS</category><category>Google</category><category>GWT</category><category>highload</category><category>Percolator</category><category>Protocol Buffers</category><category>Snappy</category><category>Spanner</category><category>архитектура Google</category><category>датацентры</category><category>Масштабируемость</category><category>энергоэффективность</category></item><item><title>Google в цифрах</title><link>https://www.insight-it.ru//highload/2011/google-v-cifrakh/</link><description>&lt;p&gt;Я уже давно ищу информацию для новой версии &lt;a href="https://www.insight-it.ru/highload/2008/arkhitektura-google/"&gt;статьи про Google&lt;/a&gt;, которая была первым
успешным постом на &lt;strong class="trebuchet"&gt;Insight IT&lt;/strong&gt; - скачок в посещаемости был примерно в 50 раз. Не смотря на устаревшую статистику она по-прежнему представляет собой большую практическую пользу, рекомендую прочитать или перечитать.&lt;/p&gt;
&lt;p&gt;В процессе перерывания зарубежной части интернета в поисках более свежей
информации о том, как устроен Google, наткнулся на любопытную
инфографику с цифрами, которой и решил с Вами поделиться, чтобы скрасить
ожидание нового поста :).&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Google в цифрах" class="responsive-img" src="https://www.insight-it.ru/images/google-by-the-numbers.jpg" title="Google в цифрах"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.insight-it.ru/goto/efb4cd33/" rel="nofollow" target="_blank" title="http://www.infographicsshowcase.com/google-by-the-numbers-infographic/"&gt;Оригинал&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Не забываем подписываться на &lt;a href="/feed/"&gt;RSS&lt;/a&gt; :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Sun, 03 Apr 2011 21:59:00 +0400</pubDate><guid>tag:www.insight-it.ru,2011-04-03:highload/2011/google-v-cifrakh/</guid><category>Google</category><category>инфографика</category><category>статистика</category><category>цифры</category></item><item><title>Google Megastore</title><link>https://www.insight-it.ru//storage/2011/google-megastore/</link><description>&lt;p&gt;Гигантский шаг в сторону распределенного будущего был предпринят
командой &lt;a href="https://www.insight-it.ru/goto/536fbea0/" rel="nofollow" target="_blank" title="http://www.appspot.com"&gt;Google App Engine&lt;/a&gt; в момент их релиза
системы хранения данных с повышенным уровнем репликации. Она направленна
на критичные для бизнеса приложения, которые требуют расположения копий
данных как минимум в трех датацентрах, полной семантики ACID для групп
сущностей и ограниченных гарантий консистентности между группами
сущностей.
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Это было большим достижением, ведь всего несколько компаний во всем мире
способны на реализацию по-настоящему меж-датацентровой системы хранения
данных. Помимо SimpleDB, как много других публично-доступных сервисов
баз данных могут хранить информацию в нескольких датацентрах
одновременно? Теперь эта возможность доступна каждому. Но всему есть
цена: так как Megastore использует втрое больше ресурсов, чем обычное
Master-Slave хранилище в GAE, стоимость так же увеличивается в три раза.
Помимо этого стоит учитывать, что с ростом надежности и издержек,
понижается производительность. Именно из-за этого, новая система
хранения является альтернативой обычному хранилищу GAE для критичных
задач, а не полной заменой.&lt;/p&gt;
&lt;h2 id="osnovnye-osobennosti-megastore"&gt;Основные особенности Megastore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Megastore совмещает масштабируемость NoSQL систем хранения данных с
    удобством традиционных СУБД. Оно использовалось для внутренних
    проектов Google на протяжении нескольких лет. Более 100 приложений,
    3 миллиардов транзакций на запись и 20 миллиардов на чтение, более
    петабайта данных распределены по множеству датацентров по всему
    миру.&lt;/li&gt;
&lt;li&gt;Megastore - хранилище, разработанное для удовлетворения требований
    современных интерактивных онлайн сервисов. Используется синхронная
    репликация для достижения высокого уровня доступности и
    консистентности. Вкратце, оно предоставляет полную ACID семантику
    для удаленных реплик с достаточно низкой задержкой, чтобы
    использоваться в интерактивных приложениях. Хранилище
    партиционируется и каждая часть реплицируется отдельно, позволяя
    достичь полного соответствия ACID внутри партиции, но
    консистентность между ними гарантируется лишь ограниченно.
    Предоставляются некоторый функционал традиционных СУБД, такой как
    вторичные индексы, но только те из них, которые масштабируются без
    сильного негативного влияния на задержки и которые укладываются в
    семантику используемой схемы партиционирования.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/9003689b/" rel="nofollow" target="_blank" title="http://labs.google.com/papers/paxos_made_live.html"&gt;Paxos&lt;/a&gt;
    используется для управлением синхронной репликацией между
    датацентрами. Это позволяет достичь очень высокого уровня надежности
    ценой повышения времени выполнения операций записи. Обычно Paxos
    используется только для координации, но в Megastore он также
    используются и для управления записью данных.&lt;/li&gt;
&lt;li&gt;Поддерживается три уровня консистентности при чтении: текущий,
    снимок и неконсистентный.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/e52d8d3e/" rel="nofollow" target="_blank" title="http://code.google.com/appengine/docs/python/datastore/entities.html"&gt;Группы сущностей&lt;/a&gt;
    являются&amp;nbsp;единицей&amp;nbsp;консистентности и транзакционности. Они
    рассматриваются как маленькие независимые базы данных. Сами же
    данные внутри каждого датацентра хранятся в масштабируемом NoSQL
    хранилище.&lt;/li&gt;
&lt;li&gt;Megastore, как и обычное хранилище в GAE, не поддерживает транзакции
    с использованием нескольких групп сущностей, это существенно
    повысило бы время их выполнения.&lt;/li&gt;
&lt;li&gt;Группы сущностей - основной механизм группировки данных для быстрого
    осуществления операций. Их размер и композиция должны быть
    сбалансированы. В каждом приложении должен найтись способ
    естественным образом очертить границы групп сущностей. При
    оптимальном выборе групп сущностей ресурсоемкие кросс-групповые
    операции будут сведены к минимуму. По сути этот процесс чем-то
    напоминает нормализацию в реляционных СУБД.&lt;/li&gt;
&lt;li&gt;Запросы с высокими требованиями по консистентности должны быть
    ограничены одной группой сущностей. Кросс-групповые запросу могут
    вернуть устаревшие результаты. Это является серьезным отличием в
    поведении от обычного хранилища GAE, где по-умолчанию используется
    высокий уровень консистентности для всех запросов, так как операции
    записи и чтения по-умолчанию происходят с мастера.&lt;/li&gt;
&lt;li&gt;В обычном хранилище GAE иногда отключается в связи с
    запланированными техническими работами, а также вовремя
    непредвиденных проблем с инфраструктурой. Megastore в большинстве
    случаев не страдает этими проблемами.&lt;/li&gt;
&lt;li&gt;Резервирование данных и избыточность достигаются посредством
    синхронной репликации, снимков и инкрементального лога транзакций.&lt;/li&gt;
&lt;li&gt;API для доступа к данным остался прежним.&lt;/li&gt;
&lt;li&gt;Операции записи могут достигать секунды для каждой группы сущностей,
    так что для приложений с высокой нагрузкой на запись оно подходит не
    так хорошо.&lt;/li&gt;
&lt;li&gt;Только новые приложения могут воспользоваться опцией Megastore,
    существующие приложения необходимо пересоздать, чтобы использовать
    эту возможность. Впоследствии изменить тип хранилища невозможно.&lt;/li&gt;
&lt;li&gt;Одно приложение не может использовать одновременно обычное хранилище
    и Megastore. Напрашивается использование одного приложения с Google
    Megastore для критически важных данных, а другое приложение с
    обычным хранилищем для всего остального, но такая схема противоречит
    правилам использования сервиса.&lt;/li&gt;
&lt;li&gt;Автоматической миграции данных между Master/Slave хранилищем и
    Megastore не существует, разработчики приложения должны сами
    позаботиться об этом. Google предоставляют лишь набор инструментов и
    примеров кода, чтобы облегчить процесс миграции.&lt;/li&gt;
&lt;li&gt;В приложениях, использующих Megastore, еще большее &amp;nbsp;значение
    приобретает эффективное кэширование данных.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="materialy-po-teme"&gt;Материалы по теме&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/7b4d766b/" rel="nofollow" target="_blank" title="http://highscalability.com/blog/2011/1/11/google-megastore-3-billion-writes-and-20-billion-read-transa.html"&gt;Google Megastore - 3 Billion Writes And 20 Billion Read
    Transactions
    Daily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/aceb53b5/" rel="nofollow" target="_blank" title="http://www.cidrdb.org/cidr2011/Papers/CIDR11_Paper32.pdf"&gt;Megastore: Providing Scalable, Highly Available Storage for
    Interactive
    Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/79ab1d81/" rel="nofollow" target="_blank" title="https://groups.google.com/group/google-appengine-downtime-notify/msg/e9414ee6493da6fb?pli=1"&gt;May 25th Datastore Outage
    Post-mortem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/9003689b/" rel="nofollow" target="_blank" title="http://labs.google.com/papers/paxos_made_live.html"&gt;Paxos Made Live &amp;ndash; An Engineering
    Perspective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/3e2c1159/" rel="nofollow" target="_blank" title="http://code.google.com/appengine/docs/python/datastore/hr/"&gt;Choosing a
    Datastore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/a24a0860/" rel="nofollow" target="_blank" title="http://code.google.com/appengine/docs/python/datastore/hr/overview.html"&gt;Using the High Replication
    Datastore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/8667b351/" rel="nofollow" target="_blank" title="http://labs.google.com/papers/bigtable.html"&gt;Bigtable: A Distributed Storage System for Structured
    Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/28e767f5/" rel="nofollow" target="_blank" title="http://highscalability.com/blog/2009/8/24/how-google-serves-data-from-multiple-datacenters.html"&gt;How Google Serves Data From Multiple
    Datacenters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/6b995f76/" rel="nofollow" target="_blank" title="http://highscalability.com/blog/2009/3/10/paper-consensus-protocols-paxos.html"&gt;Consensus Protocols:
    Paxos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/83657c8b/" rel="nofollow" target="_blank" title="http://groups.google.com/group/google-appengine/browse_thread/thread/5fc3b6a4366de62f/4b4d23e924b7b136?lnk=gst&amp;amp;q=High+Replication+Datastore+for+App+Engine#"&gt;Performance
    comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;Еще не все возможности Google Megastore полностью доступны пользователям
App Engine в виде High Replication Storage, но я думаю это вопрос
времени. Хотелось бы пообсуждать в комментариях области применения
новинки на практике: какие приложения, критичные к доступности и
сохранности данных, можно позволить себе отдать в PaaS, пускай даже от
Google?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.: По традиции хочу напомнить, что читать Insight IT удобнее всего
&lt;a href="/feed/"&gt;через RSS-reader&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Tue, 22 Feb 2011 20:18:00 +0300</pubDate><guid>tag:www.insight-it.ru,2011-02-22:storage/2011/google-megastore/</guid><category>ACID</category><category>Google</category><category>google app engine</category><category>Google Megastore</category><category>консистентность</category><category>репликация</category></item><item><title>Новый Google: интернет-гигант проливает свет на темы поиска в реальном времени, локального поиска, облачных вычислений и освобождения данных</title><link>https://www.insight-it.ru//theory/2009/novyjj-google-internet-gigant-prolivaet-svet-na-temy-poiska-v-realnom-vremeni-lokalnogo-poiska-oblachnykh-vychislenijj-i-osvobozhdeniya-dannykh/</link><description>&lt;p&gt;Когда речь заходит о продуктовых и бизнес стратегиях, &lt;a href="/tag/google/"&gt;Google&lt;/a&gt; обычно становится одной из самых скрытных и секретных компаний. Но не смотря на это, интернет-гигант некоторое время назад согласился дать серию интервью, в основном с участием высшего продуктового менеджмента, работающего в штабквартире в Mountain View, CA.&lt;/p&gt;
&lt;p&gt;В четырех отдельных интервью, сотрудники Google окунулись в самые
насущные темы, наиболее актуальные для компании в целом. Среди них
оказались различные вопросы, начиная с поиска в реальном времени,
локального поиска, и заканчивая облачными вычислениями, а также так
называемой возможностью освобождения данных. Под освобождением данных
имеется ввиду комплекс мер, направленных на предоставлении пользователям
возможности экспортировать их файлы и другую цифровую информацию из
продуктов Google (если они сами этого захотят, конечно же).&lt;/p&gt;
&lt;p&gt;Достаточно любопытный факт: менеджеры Google реально очень скучные. И им
правда нравится выглядеть именно так (по крайней мере пока их PR-коллеги
находятся рядом). Они не разговаривают о конкурентах. Они не делают
прогнозов о развитии индустрии. И они не говорят конкретно кто над чем
работает внутри Google. Просто-напросто они фокусируются на
совершенствовании своих продуктов, особенно в направлении удобства
использования пользователями, разве этого не достаточно?&lt;/p&gt;
&lt;p&gt;Возможно Jack Menzel, старший продукт-менеджер, лучше всего это выразил,
когда пошутил о "неблагодарности" работы над веб-поиском в Google: "Вы
демонстрируете [новую функцию поиска] людям, а они говорят: 'Да, вроде
она работает, ну и что?'" (Как быстро все мы забываем, каково это было
искать информацию в Интернете всего несколько лет назад.) Что ж, без
дальнейших предисловий, перейдем к основным моментам, связанным с
различными аспектами работы Google.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;em&gt;По мотивам &lt;a href="https://www.insight-it.ru/goto/c19fec69/" rel="nofollow" target="_blank" title="http://www.xconomy.com/national/2009/12/21/the-new-google-internet-giant-opens-up-about-real-time-and-local-search-cloud-computing-and-data-liberation/?single_page=true"&gt;статьи на xconomy.com&lt;/a&gt;,
автор&amp;nbsp;&lt;a href="https://www.insight-it.ru/goto/1e1524b7/" rel="nofollow" target="_blank" title="Posts by Gregory T. Huang"&gt;Gregory T. Huang&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="poisk-v-realnom-vremeni"&gt;Поиск в реальном времени&lt;/h2&gt;
&lt;p&gt;Google активно работает над максимально оперативным обновлением
результатов поиска по сети Интернет, в том числе и по социальным медиа
вроде &lt;a href="/tag/twitter/"&gt;Twitter&lt;/a&gt; или &lt;a href="/tag/facebook/"&gt;Facebook&lt;/a&gt;, практически так же быстро, как такая информация и публикуется.&lt;/p&gt;
&lt;p&gt;Menzel, бывший сотрудник Microsoft, который изучал компьютерное ремесло
в University of Washington, возглавляет продуктовую группу на данном
фронте. Он говорит, что компания Google работала над ускорением процесса
индексации и ранжирования на протяжении уже многих лет: когда-то данные
обновлялись раз в месяц, потом обновление стало ежедневным, чтобы
поспевать за блогами и новостными сайтами. В течении прошлого года
&lt;a href="/tag/twitter/"&gt;Twitter&lt;/a&gt; стал популярен и, как следствие, появилась
достаточно критичная потребность в обновлении информации за считанные
секунды или в крайнем случае минуты. "Мы двигались по направлению к
тому, чтобы становиться все быстрее и быстрее, на протяжении уже
достаточно длительного периода времени", говорит Menzel. "Данная
траектория развития была выбрана уже давно. Каждый шаг в данном
направлении приводит к все новым и новым проблемам и трудностям. Мы
верим, что именно получение доступа к свежей информации является одним
из ключевых факторов, являющихся залогом успеха Google." (В число
остальных факторов, относящихся к самому поиску, входят такие показатели
как релевантность, быстрота получения результата и полнота контента.)&lt;/p&gt;
&lt;p&gt;Menzel считает, что самой сложной задачей является не просто
быстродействие, а релевантность результатов потребностям пользователей
(возможно, кто-то привык называть этот показатель словом
&lt;em&gt;"пертинентность"&lt;/em&gt;). "Это очень, очень непросто собирать свежий
короткоживущий контент и ранжировать его рядом с, скажем, статьями из
New York Times или просто постами из блогов." Стоит заметить, что когда
контент появился буквально только что, обычно на него еще практически
никто не успел сослаться, а значит Google не может полноценно
использовать PageRank, их классическую технологию.&lt;/p&gt;
&lt;p&gt;Вместо этого, они "тяжело опираются на все то, что они выявили в течении
последних 10 лет", говорит Menzel. Это включает в себя, например,
способы отбрасывания контента, который скорее всего является
иррелевантным или спамом, в более общем случае. Помимо этого он
упоминал "совершенно новые сигналы", скажем "новые языковые модели",
которые позволяют понять какие обновления являются релевантными, а
какие - просто горстка никому не нужных данных от какого-нибудь
ученого-океанографа, или методы определения насколько тот или иной
создатель контента авторитетен в своей области.&lt;/p&gt;
&lt;p&gt;Говоря о будущем, Menzel повторил то, что казалось бы на сегодняшний
день говорят все о поиске: еще рано. "На самом деле мы лишь начали
работать над данной задачей и у нас все еще очень долгий путь впереди".
Он надеется, что в течении 5 лет Google сделает поиск намного более
персонализированным, чем он есть сегодня. Например, Google будет знать
что ты увлекаешься футболом, но привык называть его не "soccer", а
"football", то есть помимо прочего поисковая система должна понимать кем
является каждый ее конкретный пользователь, как и с кем он связан, кем
он является в реальной жизни, где находится, и, тем самым, помогать ему
организовывать всю информацию вокруг него.&lt;/p&gt;
&lt;p&gt;"Поиск - все еще очень далекая от решения проблема," - говорит Menzel.
"Существует еще масса вещей, которые очень не просто найти в
Интернете."&lt;/p&gt;
&lt;h2 id="lokalnyi-poisk"&gt;Локальный поиск&lt;/h2&gt;
&lt;p&gt;В эту категорию попадают все виды поисковых запросов, так или иначе
связанных с географической информацией, скажем "отели в Гонг-Конге" или
"рестораны в Сиэттле", а также запросы с мобильных устройств на поиск
близлежащих мест, заведений, достопримечательностей и прочих объектов.&lt;/p&gt;
&lt;p&gt;Carter Maslan, директор продуктового менеджмента в области локального
поиска в Google, называет эту область "организацией мировой информации
географически" , или созданием быстрого и простого гида по
"гео-Интернету". Самым сложным моментом в данном вопросе по его мнению
является&amp;nbsp;отображение&amp;nbsp;всех этих различных способов выражения
пользовательского запроса на очень большой массив локализированных
данных, а также возвращение правильного ответа на полученный запрос в
минимальные сроки.&lt;/p&gt;
&lt;p&gt;Maslan, еще один экс-сотрудник Microsoft, говорит, что Google
обрабатывает большое количество поисковых запросов для анализа того, как
люди предпочитают искать локальную информацию, и как с географической
точки зрения создаются ссылки на различные вещи. По его мнению конечная
цель заключается в том, чтобы сделать поиск и обнаружение мест рядом с
собой практически не требующим от пользователя каких-либо усилий.
Наиболее знакомые сценарии, это помощь в ориентировании в новом
окружении, скажем после приземления в аэропорту, или поиск баров во
время ночной прогулки по пригородам Нью-Йорка.&lt;/p&gt;
&lt;p&gt;Складывается впечатление, что все это должно плотно вписываться в более
широкую&amp;nbsp;стратегию&amp;nbsp;Google, связанную с мобильными технологиями. "Ваш
телефон знает многое" - говорит Maslan. "Он знает где Вы сейчас
находитесь, он может определить в каком направлении Вы направляетесь.
Все не ограничивается только текстом в окошке для поискового запроса. Мы
хотим вывести мобильную информацию на передний план." Существующим на
данный момент примером является &lt;a href="https://www.insight-it.ru/goto/62aa81c9/" rel="nofollow" target="_blank" title="http://www.google.com/mobile/goggles/"&gt;Google Goggles&lt;/a&gt;, приложение, которое
позволяет сфотографировать логотип, достопримечательность или какое-то
место и мгновенно получить информацию о нем.&lt;/p&gt;
&lt;p&gt;Maslan считает, что основной отличительной чертой Google в области
локального поиска является "открытость для всех источников", что
достаточно сложно с технической точки зрения. Это включает в себя
пребывание в состоянии "активной глобальности", а не просто в
индексировании информации о ключевых станциях метро. "Масштаб, с которым
Google работает с картографическими и гео-кодированными данными, в
совокупности с пониманием принципов работы Интернета является ключем для
успешной работы в данной области".&lt;/p&gt;
&lt;p&gt;Возможно в скором будущем мы увидим вещи вроде карт и списков компаний
или мест от Google в еще большем количестве мест и языков по всему миру,
с еще более точной информацией, чутко реагирующей на локальные события
вроде открытия, закрытия или перемещения предприятий и организаций. "Мы
четко понимаем, какие именно вещи у нас получаются лучше всего" -
говорит Maslan. "У нас есть небольшие команды из людей, фанатично
настроенных на реализацию их наиболее правильным образом".&lt;/p&gt;
&lt;h2 id="oblachnye-vychisleniia"&gt;Облачные вычисления&lt;/h2&gt;
&lt;p&gt;Наверняка все наслышаны о знаменитых вычислениях "в облаках", то есть с
использованием программного обеспечения, работающем на удаленных
серверах, часто нескольких одновременно и в виртуализированном&amp;nbsp;окружении, а не прямо на персональном компьютере. В
этом ключе Google наиболее интересует выполнение повседневных задач,
таких как работа с электронной почтой, составление расписаний и
управление документами. На самом деле это всего лишь часть более широкой
стратегии Google по облачным вычисления - именно она создает видимость
того, что потребители, предприятия и организации арендуют вычислительный
мощности и хранилища данных через Интернет, так как это дешевле и более
эффективно для многих приложений.&lt;/p&gt;
&lt;p&gt;Ken Norton, старший продукт-менеджер Google (а также выпускник Boston
University и бывший предприниматель), поведал о Google Apps и стратегии
компании в области облачных вычислений. Команда Norton'а работает
конкретно над Google Calendar, но Google Apps также включают в себя и
другие продукты, такие как Gmail, Google Talk, Google Docs и Google
Sites. &amp;ldquo;Сеть выигрывает на том, как приложения будут потребляться&amp;rdquo; - он
сказал.&lt;/p&gt;
&lt;p&gt;Ключевым преимуществом Google на данном фронте является масштаб и
инфраструктура. "У нас есть настолько много серверов и датацентров по
всему миру, что мы можем содержать их достаточно дешево и эффективно" -
говорит Norton. Это преимущество оказывает влияние и на индивидуальные
устройства, так как оно "открывает новые возможности" для потребителей,
возможность использовать веб-приложения с любого типа устройств, будь то
смартфон, нетбук или обычный полноразмерный ноутбук.&lt;/p&gt;
&lt;p&gt;Работа Google в области облачных вычислений сфокусирована на двух
уровнях: на первом располагаются готовые программные продукты вроде
Google Apps, направленные на прямое потребление конечными пользователями
(как индивидуальными, так и корпоративными); второй же уровень занимает
App Engine, "облачная" платформа, предназначенная для использования
разработчиками программного обеспечения для эффективного построения их
собственных веб-продуктов.&lt;/p&gt;
&lt;p&gt;Относительно прогнозов на следующий год на фронте облачных вычислений,
Norton сказал, что "мы постоянно совершенствуемся". В 2009 году было
запущенно более 100 основных новых функциональных возможностей в Google
Apps - таких вещей, как видео чат в GTalk или Gmail offline. Он считает,
что Google "продолжит делать акцент на коммуникационных предложениях".
Помимо развития Gmail и Calendar, это включает в себя доведение до ума
Google Docs и придание более завершенного вида набору их возможностей.
Norton говорит, что Google также ищет возможности по расширению своих
предложений в области коллаборации, в том числе в виде продуктов для
крупного бизнеса, совместимыми с различными системами обеспечения
безопасности для аутентификации.&lt;/p&gt;
&lt;p&gt;Подведем черту: все выглядит как-будто Google совершает переход от
фокусирования на бесплатных потребительских продуктах, работающих в
"облаках", к более активной работе над платными облачными сервисами для
бизнес-пользователей.&lt;/p&gt;
&lt;h2 id="osvobozhdenie-dannykh"&gt;Освобождение данных&lt;/h2&gt;
&lt;p&gt;Последнее время в компании все больше внимания уделяется предоставлению
пользователям легко экспортировать их данные из продуктов Google, таких
как&amp;nbsp;Blogger, Google Maps, Google Docs, Chrome и App Engine
(пользовательские данные разработчиков). На первый взгляд это может
показаться очередным капризом PR-менеджеров, но на самом деле за этим
фактом стоит более глубокая и интересная инновационная стратегия.&lt;/p&gt;
&lt;p&gt;Brian Fitzpatrick, ветеран opensource разработок, возглавляет двухлетний
проект от офисов Google в Чикаго. Основная идея заключается в оказании
помощи пользователям, если они хотят получить свои файлы и другие данные
из облака Google, чтобы у них была возможность перейти на какую-то
другую систему, если они захотят. "Большинство людей не думает о
возможности экспорта данных до тех пор пока не станет слишком поздно" -
говорит Fitzpatrick. "Мы надеемся, что если вы прекратите использование
одного нашего продукта сегодня, то у вас будет возможность попробовать
другой продукт завтра."&lt;/p&gt;
&lt;p&gt;Помимо "создания правильных возможностей для пользователей" существует и
другая мотивация. "Мы, как компания, старательно работаем над такими
вещами, как поиск. Если пользователи становятся привязанным к вашим
продуктам, то вы становитесь более самодовольными, расслабленными. Если
же уйти достаточно просто, то вы будете серьезно мотивированны делать
свои продукты как можно лучше, чтобы избежать ухода пользователей любой
ценой."&lt;/p&gt;
&lt;p&gt;Что ж, теперь у нас есть эта возможность. Google считает, что эта
открытость с точки зрения пользовательских данных, заставит компанию
работать более старательно для удержания пользовательской
базы.&amp;nbsp;Fitzpatrick не знает других компаний, которые бы открыто заявляли
об инициативе создания подобных возможностей для своих пользователей.&lt;/p&gt;
&lt;p&gt;По его мнению наибольшая трудность лежит не собственно в разработке
такого функционала, а в повышение&amp;nbsp;осведомленности&amp;nbsp;пользователей о
наличии возможности экспортировать свои данные из облака. "Достаточно
сложно заставить пользователей думать, что это на самом деле важно". Но
в целом этот подход достаточно достаточно хорошо вписывается в понятие о
том, как потребители и корпоративные пользователи заботятся о всех своих
данных, когда все большая и большая их част мигрирует "в облака" и как
Google хочет быть ответственным за организацию мировых данным, шаг за
шагом, на протяжении всего пути.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Tue, 29 Dec 2009 18:17:00 +0300</pubDate><guid>tag:www.insight-it.ru,2009-12-29:theory/2009/novyjj-google-internet-gigant-prolivaet-svet-na-temy-poiska-v-realnom-vremeni-lokalnogo-poiska-oblachnykh-vychislenijj-i-osvobozhdeniya-dannykh/</guid><category>cloud computing</category><category>data liberation</category><category>Google</category><category>local search</category><category>online</category><category>realtime search</category><category>интервью</category><category>интернет</category><category>облачные вычисления</category><category>освобождение данных</category><category>поиск</category><category>Сеть</category></item><item><title>Google Developer Day 2009</title><link>https://www.insight-it.ru//event/2009/google-developer-day-2009/</link><description>&lt;p&gt;10 ноября состоялась конференция, название которой "совершенно случайно"
совпало с заголовком данного поста. Не знаю за какие заслуги я получил
туда приглашение, но не воспользоваться возможностью посетить подобное
мероприятие, да еще и бесплатно, было бы просто непростительно.
Позвольте представить вам отчет о моих впечатлениях от &lt;a href="https://www.insight-it.ru/goto/3301b148/" rel="nofollow" target="_blank" title="GDD2009"&gt;GDD2009&lt;/a&gt;.
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;День начался с традиционной проверки почтового ящика - обнаружилась пара
писем с приглашениями в &lt;a href="https://www.insight-it.ru/goto/ee14d625/" rel="nofollow" target="_blank" title="Google Wave"&gt;Google Wave&lt;/a&gt; и Google Wave Sandbox, сначала был очень удивлен - не может же быть таких совпадений, чтобы случайно они прямо в день конференции пришли. Чуть позже
оказалось, что и правда, не совпадение: аналогичные приглашения получили
все участники конференции. Вообще Wave был "хитом" на данной
конференции - множество докладов так или иначе касались данного проекта,
а также на каждом втором экране ноутбуков участников не трудно было
разглядеть достаточно примечательный интерфейс нового продукта Google.
Если никто ни разу не слышал про Wave - если в двух словах, то это новый
подъод к онлайн-общению, пытающийся совместить в себе все преимущества
существующих на данный момент средств связи, коллективной работы и
обмена медиа-данными; не хватает разве что аудио-видео трансляций и
конференций, но это лишь вопрос времени, &lt;a href="https://www.insight-it.ru/goto/770fc0df/" rel="nofollow" target="_blank" title="http://www.google.com/googlevoice/about.html"&gt;Google Voice&lt;/a&gt; не за горами. Наверное проект Google Wave заслуживает отдельного поста, по этому подробнее останавливаться на нем не буду, так что все же давайте пойдем далее по порядку...&lt;/p&gt;
&lt;h3 id="otkrytie"&gt;Открытие&lt;/h3&gt;
&lt;p&gt;GDD была первой конференцией, которую мне довелось посетить, и на
которой было реально интересно смотреть открытие. В течении чуть более
часа прошло несколько мини-презентаций основных тем и потоков
конференции, причем быстро, информативно и с юмором. Особенно
запомнились выступления о ключевых нововведениях HTML5 и live demo Wave.
По HTML5 показали примеры того, что можно будет делать без использования
дополнительных расширений и проприетарных технологий вроде Flash'а:
векторная графика, аудио/видео, хранение данных на клиентской стороне и
многое другое. Демо Wave таже было впечатляющим, так как пока аккаунты
Wave есть лишь у "избранных", пообщаться с кем-то не так просто; а на
сцене сотрудники гугл достаточно весело так пообщались со своими
коллегами в зале, попутно демонстрируя основные возможности технологии.&lt;/p&gt;
&lt;h3 id="tech-talks"&gt;Tech talks&lt;/h3&gt;
&lt;p&gt;Один из залов был практически полностью посвящен выступлениям в формате
tech talk: выступали инженеры Google (и не только) с обзором какой-то
достаточно узкой темы. Основным минусом этого потока был сам зал:
желающих было существенно больше, чем мест - в итоге я послушал в этом
потоке только одно выступление про производительность сайтов на
клиентской стороне (&lt;a href="https://www.insight-it.ru/goto/e807358/" rel="nofollow" target="_blank" title="основная релевантная ссылка"&gt;основная релевантная ссылка&lt;/a&gt;)
и сбежал при первой же возможности из-за недостатка воздуха и стабильной
работы Ёты или WiFi, даже не смотря на то что остальные доклады обещали
быть достаточно интересными.&lt;/p&gt;
&lt;h3 id="produkty-google-dlia-razrabotchikov"&gt;Продукты Google для разработчиков&lt;/h3&gt;
&lt;p&gt;В этой секции я провел большую часть своего времени на конференции,
причин было несколько: начиная от низкой плотности населения и
заканчивая нормальным доступом в Интернет, хотя доклады тоже были
достаточно интересные :). В данной секции освещались три основные темы:
&lt;a href="https://www.insight-it.ru/goto/ee14d625/" rel="nofollow" target="_blank" title="Google Wave"&gt;Google Wave&lt;/a&gt;, &lt;a href="https://www.insight-it.ru/goto/99b033c0/" rel="nofollow" target="_blank" title="Google App Engine"&gt;Google App Engine&lt;/a&gt;, &lt;a href="https://www.insight-it.ru/goto/f5686a9/" rel="nofollow" target="_blank" title="GWT"&gt;Google Web Toolkit&lt;/a&gt;. Оказывается GWT у них принято называть как-то вроде "гуит", очень забавно звучало, особенно когда через слово повторяют. Давайте обо всем по порядку...&lt;/p&gt;
&lt;p&gt;Про Wave рассказали все что только можно и что нельзя: все виды API
какие в нем есть и какие планируются, различные варианты использования,
о том как в нем используется GWT для создания интерфейса (в том числе и
мобильного) и многое-многое другое. Опять же - это хорошая тема для
отдельного поста, так что не задерживаемся, проходим дальше.&lt;/p&gt;
&lt;p&gt;Google App Engine по прежнему для меня был достаточно актуален, так как
я все еще вожусь с ним на досуге. По нему было два доклада: один вел
Fred Sauer, про базовые принципе работы платформы, и второй был более
детальным, Brett Slatkin рассказывал о практическом применении новых
функциональных возможностей, особенно много внимания было уделено разным
вариантам применения &lt;a href="https://www.insight-it.ru/goto/bb844c8c/" rel="nofollow" target="_blank" title="Task Queue"&gt;Task Queue&lt;/a&gt;.
Оба докладчика очень хорошо и наглядно рассказывали, но доклад Fred'а
был слишком прост и был нацелен на тех, кто еще совсем не знаком с
платформой.&lt;/p&gt;
&lt;p&gt;Про GWT официально тоже было два доклада, но один из них в итоге все
равно полностью свелся к обсуждению Wave, так как это всем было
существенно более интересно. Второй же доклад был из серии 201, то есть
для тех кто уже работает с технологией, но докладчика тоже унесло
непонятно куда - вместо GWT он рассказывал о создании систем со слабой
связанностью компонентов и &lt;a href="https://www.insight-it.ru/goto/96d38b38/" rel="nofollow" target="_blank" title="Dependency Injection"&gt;Dependency Injection&lt;/a&gt; в Java; в итоге целый час мусолил на примерах с кодом то, что можно было бы рассказать за 5 минут.&lt;/p&gt;
&lt;h3 id="obshchaia-organizatsiia"&gt;Общая организация&lt;/h3&gt;
&lt;p&gt;Не смотря на бесплатное участие в конференции, организаторы не
поскупились на техническое обеспечение мероприятия. Мероприятие
проходило в кинотеатре Октябрь на Новом Арбате, в 5 потоков; как
следствие: большие хорошие проекторы, качественный звук и удобные
кресла. Большинство выступлений проходило на английском, всем желающим
выдавали наушники и специальные девайсы для синхронного перевода (сам не
взял, но многие пользовались). Помимо этого всех бесплатно кормили
завтраком и обедом (вполне прилично) + фуршет-afterparty чуть ли не до
ночи. Традиционный пакетик с безделушками почему-то выдавали в конце
мероприятия, в обмен на заполненную анкету с отзывом о мероприятии; как
верно подметил один человек в официальной волне мероприятия: если
кому-то и правда лень было заполнять анкету - заполняли наугад и толку
от этого ноль, зато те кто любят записывать информацию с конференции в
халявный блокнотик не смогли этого сделать.&lt;/p&gt;
&lt;p&gt;Из минусов могу припомнить только длинную очередь на входе (в том числе
и на улице), а также после окончания в гардероб. Правда я и ту и другую
достаточно легко минимизировал или избежал: на регистрации сразу заметил
нужную девушку, раздающие бейджики на букву Б, а вторую тупо не сдав
куртку в гардероб :).&lt;/p&gt;
&lt;p&gt;В целом с точки зрения организации это была одна из лучших конференций,
на которых мне доводилось побывать.&lt;/p&gt;
&lt;h3 id="paru-slov-v-zakliuchenii"&gt;Пару слов в заключении&lt;/h3&gt;
&lt;p&gt;Конференция выдалась отличная, да, сплошная самореклама Google, но они
могут себе это позволить; причем качество они держат на уровне, все было
весело, интересно и полезно. Не зря у них даже есть специальные
люди-проповедники с должностью Developer Advocate - невероятно толково
рассказывают и объясняют.&lt;/p&gt;
&lt;p&gt;Извиняюсь, что отчет получился не настолько подробным, как хотелось бы,
да и на два дня позже мероприятия - снова проблемы со свободным
временем, пишу второпях перед поездкой за город на выходные, даже не
успеваю нормально проверить опечатки и русский язык. Вернусь -
обязательно все поправлю и отвечу на комментарии, если таковые появятся.
Кстати не забывайте подписываться на &lt;a href="/feed/"&gt;RSS&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;P.S.: Продам инвайты в Google Wave ;) (шутко)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Fri, 13 Nov 2009 15:47:00 +0300</pubDate><guid>tag:www.insight-it.ru,2009-11-13:event/2009/google-developer-day-2009/</guid><category>gae</category><category>GDD</category><category>gdd2009</category><category>gdd2009ru</category><category>Google</category><category>google app engine</category><category>Google Developer Day</category><category>Google Wave</category><category>Google Webmaster Tools</category><category>GWT</category><category>Wave</category><category>конференция</category></item><item><title>Django в гостях у Google</title><link>https://www.insight-it.ru//python/2009/django-v-gostyakh-u-google/</link><description>&lt;p&gt;&lt;img alt="Google App Engine" class="left" src="https://www.insight-it.ru/images/appengine.jpg" title="Google App Engine"/&gt;
&lt;del&gt;Давным-давно, в далекой-предалекой галактике...&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Хотя да, достаточно давно уже Google выпустили в свет платформу &lt;a href="https://www.insight-it.ru/goto/99b033c0/" rel="nofollow" target="_blank" title="Google App Engine"&gt;Google App Engine&lt;/a&gt;. Описание
этого продукта меня заинтересовало еще до открытия публичного доступа к
системе и я даже записался на полу-закрытое тестирование. Вскоре пришло
подтверждение, что мол "мы рады сообщить, что Ваша учетная запись
активирована и теперь у Вас есть возможность попробовать наш новый
продукт, для этого нажмите ссылку такую-то". Но пришло оно как-то не
очень удачно, когда ни лишнего свободного времени не было, да и идеи
подходящей для создания чего-нибудь эдакого на новой платформе тоже на
горизонте не наблюдалось. В общем зашел на их сайт, посмотрел админку,
поставил демо-приложение, поигрался чуток и забросил. Но с тех пор руки
так и не прекращали чесаться от желания попробовать GAE на каком-нибудь
более приближенном к реальности приложении, что мне совсем недавно и
довелось сделать. Спешу поделиться впечатлениями.
&lt;!--more--&gt;
Если Вы даже краем уха не слышали о платформе &lt;code&gt;Google App Engine&lt;/code&gt; и после
прочтения вступления не удосужились скопировать это название в свою
любимую поисковую систему, чтобы почитать по-подробнее, то Вам повезло:
для порядка я все-таки расскажу чуть-чуть о тех вкусностях, которые так
долго поддерживали мой интерес к данному проекту.&lt;/p&gt;
&lt;p&gt;Если взглянуть издалека, то GAE представляет собой условно-бесплатный
хостинг для веб-приложений, для разработчиков предоставляется все
необходимое: начиная от минимально-необходимого &lt;a href="https://www.insight-it.ru/goto/d7620107/" rel="nofollow" target="_blank" title="SDK"&gt;SDK&lt;/a&gt;
со встроенным веб-сервером, локально эмулирующим саму платформу,
заканчивая неплохой документацией по самой системе и доступным из нее
API от Google. Почему условно-бесплатный? Бесплатно приложениям
выделяется лишь ограниченное количество вычислительных ресурсов, при
превышении которых по выбору владельца приложения либо взимается вполне
&lt;a href="https://www.insight-it.ru/goto/69548105/" rel="nofollow" target="_blank" title="скромная плата"&gt;скромная плата&lt;/a&gt;,
либо всем пользователям начинают показывать "извиняйте, заходите завтра"
(в прямом смысле, счетчики потребления ресурсов сбрасываются ежедневно).&lt;/p&gt;
&lt;p&gt;Но финансовый вопрос далеко не самый интересный, давайте взглянем на
техническую сторону медали. Написанное с использованием SDK приложение
загружается в production-окружение, которое физически размещается на тех
самых известных кластерах Google, о которых у меня даже &lt;a href="https://www.insight-it.ru/highload/2008/arkhitektura-google/" title="есть пост"&gt;есть пост&lt;/a&gt;
(конечно же под GAE используется только очень небольшая часть их
вычислительных можностей). Причем все заботы о распределенной работе
приложения на большом количестве машин платформа берет на себя:
разработчику не нужно думать ни о балансировке нагрузки, ни о
партиционировании данных, ни о других аспектах. Сразу же после окончания
процессов загрузки и развертывания приложение готово становится готово к
работе и доступно по домену третьего уровня на &lt;code&gt;*.appspot.com&lt;/code&gt;, либо можно
подключить свой отдельный домен.&lt;/p&gt;
&lt;p&gt;Технические ограничения тоже имеют быть: для разработки под GAE можно
использовать лишь небольшой набор языков программирования, в частности
Python 2.5, а также Java и все остальные языки, компилируемые или
интерпретируемые под JVM (JRuby, Scala, Rhino, etc.). Все приложения
исполняются в песочнице, ограничивающей доступ к окружающему миру, то
есть определенные подмножества языков становятся недоступны, например:
доступ к файловым системам, встроенные средства обработки изображений,
доступ к сторонним ресурсам по HTTP, отправка почты. Про реляционные
базы данных, memcached и библиотеки, использующие нативный,
платформозависимый код, также стоит забыть. Но не все так плохо, как
кажется: для реализации всех "отобранных" у разработчиков функциональных
компонент Google предоставляет собственные сервисы-заменители, доступные
через хорошо документированный API или вовсе замаскированные под
стандартные методы языка. В качестве дополнительных бонусов
предоставляются и возможности по интеграции с другими продуктами Google,
скажем можно легко сделать авторизацию пользователей в приложении по
учетным записям от &lt;em&gt;GMail&lt;/em&gt; или нотификацию пользователей по Jabber через
&lt;em&gt;GTalk&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Отдельного внимания заслуживает используемая в данной платформе система
хранения данных, основанная на &lt;strong&gt;BigTable&lt;/strong&gt;, о которой более подробно
можно почитать в уже упомянутом &lt;a href="https://www.insight-it.ru/highload/2008/arkhitektura-google/" title="посте об архитектуре Google"&gt;посте об архитектуре Google&lt;/a&gt;.
Если в двух словах, то она представляет собой распределенное
&lt;strong&gt;не&lt;/strong&gt;реляционное хранилище данных, автоматически обеспечивающее
репликацию и кеширование данных, а также практически гарантирующее
постоянную доступность данных вне зависимости от сбоев низлежащего
оборудования. Для доступа к нему разработчикам предоставляется
специальный API и язык доступа к данным &lt;em&gt;GQL&lt;/em&gt;, слегка напоминающий
упрощенный диалект &lt;em&gt;SQL&lt;/em&gt; (лишь отдаленно). Продукт в обращении
достаточно своеобразен, как оказалось самый простой способ привыкнуть к
работе с ним - выкинуть из головы все знания о традиционных СУБД и
взглянуть на процесс хранения данных с чистого листа. Разномастные
JOIN'ы и прочие изыски лишь мешают думать в терминах подобных систем.&lt;/p&gt;
&lt;p&gt;Закончив тему с рекламой GAE, позвольте перейти к моим личным
впечатлениям. Попробовал я данную платформу на вполне конкретном примере
(в конце поста дам ссылочку на частично-готовый результат, если кому
интересно), надо же в конце-концов на что-то с пользой убивать внезапно
появившееся свободное время. ОтJava и прочей компании языков, основанных
на JVM, я невероятно устал на теперь уже "прошлой" работе, так что взор
мой упал на Python и давно находящийся у меня на слуху (в основном
благодаря &lt;a href="https://www.insight-it.ru/goto/d12c91be/" rel="nofollow" target="_blank" title="Ивану Сагалаеву"&gt;Ивану Сагалаеву&lt;/a&gt;)
фреймворк &lt;a href="https://www.insight-it.ru/goto/8e1e1008/" rel="nofollow" target="_blank" title="Django"&gt;Django&lt;/a&gt;. Ни с
тем, ни с другим я ранее почти не был знаком на практике, разве что
когда-то пытался помогать своим очень хорошим подругам с прохождением
Python в университете (пользуясь случаем, передаю привет Полине, Кате и
Юле, очень по вам скучаю ;) ). Стоит упомянуть, что существует несколько
сборок Django, адаптированных под GAE, наиболее продуманным и готовым к
эксплуатации мне показался проект под названием &lt;a href="https://www.insight-it.ru/goto/2c5c0602/" rel="nofollow" target="_blank" title="app engine patch"&gt;app engine patch&lt;/a&gt;,
которым я и воспользовался для экспериментов.&lt;/p&gt;
&lt;p&gt;Django, как известно, является вполне традиционным веб-фрейморком,
пропагандирующим свою вариацию на тему MVC (именуемую &lt;strong&gt;MVT&lt;/strong&gt; - &lt;code&gt;Model-View-Template&lt;/code&gt;, но по сути абсолютно то же самое), а также целый ряд философских верований (вроде &lt;em&gt;DRY, Don't repeat yourself&lt;/em&gt;), которым даже отведена &lt;a href="https://www.insight-it.ru/goto/ecd0c9e6/" rel="nofollow" target="_blank" title="отдельная страница на сайте"&gt;отдельная страница на официальном сайте&lt;/a&gt;.
Адаптированная под GAE версия фреймворка отличается от стандартной по
большому счету лишь замененной частью &lt;code&gt;Model&lt;/code&gt;, в которую очень неплохо
вписался предоставляемый API к уже упоминавшемуся хранилищу данных. По
всем остальным компонентам системы официальная документация по Django
практически полностью актуальна и сильно помогла понять всю картину
разработки веб-приложений с использованием данных технологий.&lt;/p&gt;
&lt;p&gt;Пересказывать функциональные возможности Django как-то не входило в мои
планы, все кому интересно и так уже в курсе или знают где посмотреть.
Хочу лишь сказать, что со своей задачей упрощения и ускорения процесса
разработки веб-приложений он полностью справляется: все основные
функциональные компоненты реализуются просто, легко и быстро, при этом
особой необходимости (да и желания) вникать в то, как оно в итоге
работает не возникает. Если же взглянуть на Django в совокупности с
возможностями GAE - вопросы масштабируемости также по большей части с
плеч разработчика снимаются (если не забыть прочитать документацию по
хранилищу и не творить глупостей). В общем что-что, а количество
человекочасов, требуемых на создание качественного масштабируемого
веб-приложения, эта парочка способна сократить изрядно.&lt;/p&gt;
&lt;p&gt;Предложение Google по использованию платформы GAE выглядит очень
заманчиво, не смотря на все ограничения под нее можно как портировать
существующие приложения, так и легко создавать новые. Бесплатное
использование до превышения квот также не может не радовать (кстати
квоты там рассчитаны на мировой рынок, превысить большинство из них в
рамках рунета - надо постараться, мне кажется). Но закончить данное
повествование мне всетаки хотелось парой недокументированных или вкратце
официально упоминавшихся "ложек дегтя". Первая неприятная особенность:
процессы, обрабатывающие пользовательские запросы приложений, умирают
после очень небольшого времени простоя (таймаут судя по всему секунд
20-30). По истечении таймаута система освобождает использующиеся
приложением ресурсы и когда после перерыва приходит очередной
пользователь система вынуждена заново инициализироваться (чуть ли не
заново компилировать байткод, хотя не уверен), что занимает около 5
секунд, а то и больше, во время которых пользователю ничего не остается
кроме как терпеливо ждать. Сделали данный механизм видимо в связи с тем
фактом, что подавляющее большинство развернутых приложений были сделаны
просто чтобы побаловаться и были сразу же заброшены, что делает
неэффективным постоянное держание в готовом состоянии даже одного
процесса для каждого приложения. Таким образом использование GAE для
тяжелых веб-приложений с небольшой целевой аудиторией не очень
эффективно.&amp;nbsp; Минус второй: существуют некоторые жесткие ограничения,
которые не разрешают увеличивать даже за деньги (по крайней мере
расценок не видно). В их число входят максимальное время обработки
одного запроса (30 секунд, правда не ясно распространяется ли это на
выполнение задач в Task Queue и местном аналоге Cron'а), 30 активных
процессов, обрабатывающих запросы приложения (что влечет за собой
достаточно жесткое ограничение на количество запросов в секунду в районе
нескольких сотен), максимальный размер HTTP запроса/ответа в 10 мегабайт
и некоторые другие. В итоге "тяжелые" вычисления на GAE не погоняешь
(хотя есть варианты с применением AJAX и, соответственно, большого
количества запросов к GAE), от Digg-эффекта или DDOS'а есть шанс не
уберечься, хостинг файлов не соорудить, но... разве это ограничения?
Есть масса более интересных типов веб-приложений, способных прекрасно
существовать в такой среде. Да и в крайнем случае всегда можно связаться
с представителями Google с просьбой в виде исключение для Вашего
приложения, судя по их заявлениям все ограничения носят искусственный
характер и служат лишь для защиты от потребления неоправданно большого
количества вычислительных ресурсов плохо спроектированных приложениями.&lt;/p&gt;
&lt;p&gt;Кстати в американской части Интернета о GAE ходят в основном негативные
мнения, мол тормозит, большое время отклика, сплошные таймауты и ошибки.
На практике пока не удалось столкнуться с чем-то подобным, но реально
работающего приложения с активной пользовательской базой у меня пока нет
для того, чтобы делать какие-то относительно объективные выводы. Может
быть со временем что-нибудь изменится и более тонкие нюансы станут
выползать на поверхность - время покажет. Как раз будет повод написать
еще один пост на эту же тему :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Mon, 19 Oct 2009 23:53:00 +0400</pubDate><guid>tag:www.insight-it.ru,2009-10-19:python/2009/django-v-gostyakh-u-google/</guid><category>app engine patch</category><category>BigTable</category><category>django</category><category>gae</category><category>Google</category><category>google app engine</category><category>Python</category><category>Масштабируемость</category><category>платформа</category></item><item><title>Google Chrome</title><link>https://www.insight-it.ru//linux/2008/google-chrome/</link><description>&lt;p&gt;&lt;img alt="Google Chrome" class="right" src="https://www.insight-it.ru/images/google-chrome.png" title="Google Chrome"/&gt;
Наверное многие из вас уже успели за последние пару дней стать
свидетелями всей этой шумихи на просторах Сети, связанной с выходом
Google на рынок браузеров. Сопутствующие релизу
&lt;a href="https://www.insight-it.ru/goto/c770d69f/" rel="nofollow" target="_blank" title="http://www.google.com/googlebooks/chrome/#"&gt;комиксы&lt;/a&gt; произвели на меня
вполне положительное впечатление, благодаря достаточно большой
актуальности поднятых в них проблем и интересным вариантам их решений.
Так что я определенно решил, что поглядеть что за зверь такой - &lt;strong&gt;Google
Chrome&lt;/strong&gt;, определенно стоит, а что из этого вышло я и хотел бы тут
рассказать, так что очередную рекламу нового продукта или какие-либо
практически полезные советы у Вас врядли получится здесь обнаружить.
&lt;!--more--&gt;
Первым делом я посетил &lt;a href="https://www.insight-it.ru/goto/34cc95f4/" rel="nofollow" target="_blank" title="http://www.google.com/chrome"&gt;официальную страничку
браузера&lt;/a&gt; и практически сразу немного
разочаровался, увидев в заголовке надпись &lt;strong&gt;Google Chrome (BETA) for
W****ws&lt;/strong&gt;. Сразу напросился вопрос: а где версия для &lt;strong&gt;Linux&lt;/strong&gt;?
Покопавшись в соседних страничках ничего подобного обнаружить не
удалось - пришлось пожать плечами с мыслью "наверное еще не сделали".&lt;/p&gt;
&lt;p&gt;Зато через какое-то время наткнувшись на очередную заметку про все ту же
довольно избитую тему, я заметил ма-а-аленькую неприметную
&lt;a href="https://www.insight-it.ru/goto/2e08eade/" rel="nofollow" target="_blank" title="http://dev.chromium.org/developers/how-tos/build-instructions-linux"&gt;ссылку&lt;/a&gt;
на "инструкцию по компиляции Google Chrome из исходников в Linux". В
очередной раз пожав плечами с мыслью "а нам не привыкать, все равно
Gentoo пользуюсь" отправился вводить заветное заклинание в
свежесозданную консольку.&lt;/p&gt;
&lt;p&gt;Заклинание это выглядит примерно следующим образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;CHROME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/src
mkdir &lt;span class="nv"&gt;$CHROME&lt;/span&gt;/chrome
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$CHROME&lt;/span&gt;/chrome
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C
&lt;span class="nv"&gt;$CHROME&lt;/span&gt;/depot_tools/gclient config http://src.chromium.org/svn/trunk/src
&lt;span class="nv"&gt;$CHROME&lt;/span&gt;/depot_tools/gclient sync
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$CHROME&lt;/span&gt;/src/chrome
../third_party/scons/scons.py Hammer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для успешного каста требуются следующие ингридиенты:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subversion &amp;gt;= 1.4&lt;/li&gt;
&lt;li&gt;pkg-config &amp;gt;= 0.20&lt;/li&gt;
&lt;li&gt;python &amp;gt;= 2.4&lt;/li&gt;
&lt;li&gt;perl &amp;gt;= 5.x&lt;/li&gt;
&lt;li&gt;gcc/g++ &amp;gt;= 4.2&lt;/li&gt;
&lt;li&gt;bison &amp;gt;= 2.3&lt;/li&gt;
&lt;li&gt;flex &amp;gt;= 2.5.34&lt;/li&gt;
&lt;li&gt;gperf &amp;gt;= 3.0.3&lt;/li&gt;
&lt;li&gt;libnss3-dev &amp;gt;= 3.12&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Начался процесс вполне оптимистично - строчки, генерируемые &lt;strong&gt;svn co&lt;/strong&gt;
побежали по экрану вполне весело, но когда этот процесс затянулся на
более чем час &amp;ndash; стало очевидно, что даже &lt;em&gt;Google&lt;/em&gt; оказалось не по зубам
выдержать такой наплыв желающх "заценить" новую игрушку и обеспечить
достаточную пропускную способность на сервере с SVN. Правда и масштабы
проекта мягко говоря впечатляют - директория с исходным кодом перед
инициализацией компиляции оказалось очень даже весомой: &lt;strong&gt;2.6 GB&lt;/strong&gt;. В
общем в итоге я не придумал ничего лучше, чем по старой традиции
оставить браузер компилироваться на ночь и с чистой совестью уползти
спать.&lt;/p&gt;
&lt;p&gt;В итоге оказалось, что в результате получается не вовсе браузер, а лишь
некоторые непонятно зачем нужные бинарники: надо было внимательно читать
инструкцию, особенно обведенный в красную рамку блок - студенческая
привычка при чтении чего-либо подсознательно отфильтровывать всю на
первый взгляд второстепенную информацию, попадающую в категорию "слишком
много букв", дала о себе знать :( В общем там об этом все заранее
предупреждали - я просто не заметил, ну да ладно: в wine-то оно точно
заведется, все тот же Google с легкостью помог обнаружить
соответствующий мануал, для моего Gentoo он свелся к следующему:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
emerge --sync&lt;span class="p"&gt;;&lt;/span&gt; emerge -av wine cabextract
&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/bin
sudo wget www.kegel.com/wine/winetricks
sudo chmod +x winetricks
winetricks riched20 riched30 flash allfonts
&lt;span class="nb"&gt;cd&lt;/span&gt; ~
wget gpdl.google.com/chrome/install/149.27/chrome_installer.exe
wine chrome_installer.exe
rm chrome_installer.exe
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Запуск с ходу из инсталлятора ничем хорошим не закончилcя, но вот такая
команда вполне нормально запустила-таки браузер&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wine ~/.wine/drive_c/windows/profiles/blinkov/Local Settings/Application Data/Google/Chrome/Application/chrome.exe--new-http --in-process-plugins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(если кто соберется копипастить - не забываем подменять &lt;code&gt;blinkov&lt;/code&gt; на свое имя
пользователя)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Первое впечатление - ужасный V**ta-like дизайн, вернее не то чтобы он
совсем ужасный - минималистичность очень даже полезное свойство для
дизайна браузера, но в мое KDE 3.5.9 темно-фиолетовой раскраски он не
вписывается ну совсем никак. Ну да ладно - пока он стоит "просто
побаловаться", то можно и потерпеть. Далее я решил пройтись по основным
"фишечкам", заинтересовавшим меня в комиксах - все реализовано вполне
"как обещали", очень много концептуально правильных решений, которых в
старом-добром FF определенно не хватает (перечислять наверное смысла
нет - все и так уже, наверное, в курсе что там есть "вкусненького"). Но
и многих абсолютно жизненно-важных вещей я там не обнаружил - начиная с
блокировки рекламы и заканчивая все тем же стандартно-фиксированным
дизайном и отсутствием центрального репозитория плагинов. Кое-какие
неприятности можно свалить на все еще не окончательную доведенность до
ума wine (проблемы с SSL/TSL, скажем), но на них я смело закрывал
глаза - пока не будет полноценной Linux-версии о регулярном
использовании данного продукта речи быть просто не может. Скорость
работы новинки также произвела впечатление - на его фоне даже FF чисто
субъективно показался медлительным (не смотря на все огрехи wine, как
оно будет выглядить в native-версии - предсказать сложно).&lt;/p&gt;
&lt;p&gt;Меню настроек оказалось вполне стандартным - ничего лишнего, лишь самые
необходимые вещи, даже ребенок разберется. Хотя сложно на самом деле
сказать плюс это или минус: если вдруг взбредет в голову потюнить
что-либо более специфическое, могут возникнуть проблемы, хотя впринципе
возможно там всетаки предусмотренно какое-то более расширенное меню
настроек, по аналогии с about:config в FF, а я его просто не нашел.&lt;/p&gt;
&lt;p&gt;Вдоволь наигравшись, я смело закрыл окошко браузера, с твердой
уверенностью, что когда-нибудь потом обязательно заморочусь и с
установкой и (возможно) эксплуатацией полноценной native Linux версии,
когда граждане из Google соизволят-таки довести ее до работоспособного
состояния - к тому времени глядишь и ситуацию с плагинами и темами
исправят. Вот такая вот бестолковая история, спасибо, что дочитали до
конца :)&lt;/p&gt;
&lt;p&gt;P.S.: А вот &lt;a href="/feed/"&gt;тут есть RSS&lt;/a&gt;, если вдруг кто еще не в курсе.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Sat, 06 Sep 2008 00:36:00 +0400</pubDate><guid>tag:www.insight-it.ru,2008-09-06:linux/2008/google-chrome/</guid><category>Chrome</category><category>Google</category><category>Google Chrome</category><category>online</category><category>браузер</category></item><item><title>Архитектура Google Talk</title><link>https://www.insight-it.ru//highload/2008/arkhitektura-googletalk/</link><description>&lt;p&gt;&lt;a href="https://www.insight-it.ru/goto/8bce017/" rel="nofollow" target="_blank" title="http://www.google.com/talk"&gt;Google Talk&lt;/a&gt; представляет собой сервис
мгновенного обмена сообщениями от Google. В основе этого сервиса лежит
&lt;abbr title="eXtensible Messaging and Presence Protocol"&gt;XMPP&lt;/abbr&gt; протокол, более известный как &lt;em&gt;Jabber&lt;/em&gt;. В России среди &lt;abbr title="Instant Messaging"&gt;IM&lt;/abbr&gt;-сервисов
несомненно наиболее широко распространен &lt;em&gt;ICQ&lt;/em&gt;, но количество русских
пользователей &lt;em&gt;Jabber&lt;/em&gt; тоже неуклонно растет.&lt;/p&gt;
&lt;p&gt;Вам когда-нибудь доводилось задумываться какое количество сообщений
приходится обрабатывать такого рода сервисам? Допустим есть абстрактный
&lt;abbr title="Instant Messaging"&gt;IM&lt;/abbr&gt;-сервис, которым пользуется миллион пользователей, в среднем каждый из
них отправляет сто текстовых сообщений. Сколько всего сообщений
обработал и доставил сервис? Сто миллионов? Наивно!
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id="vvedenie"&gt;Введение&lt;/h3&gt;
&lt;p&gt;Сервисы мгновенного обмена на самом деле подвергаются существенно
большей нагрузке, чем это может показаться на первый взгляд. Давайте
взглянем на расшифровку аббревиатуры &lt;abbr title="eXtensible Messaging and Presence Protocol"&gt;XMPP&lt;/abbr&gt;: eXtensible Messaging and
Presence Protocol. Обмен сообщениями - лишь одна из его функций,
наиболее важная же его часть остается "за сценой" - отображение
присутствия пользователей &lt;em&gt;online&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Давайте посмотрим на наш абстрактный пример с точки зрения присутствия:
пускай им пользуется все тот же миллион пользователей, когда один из них
включил компьютер и появился online - он должен уведомить весь свой
список контактов об этом событии, а также узнать кто из них находится
online. Если этот список велик, то такое элементарное событие может
обернуться для сервиса далеко не одной сотней обработанных и
доставленных сообщений. Помимо простого изменения статуса online/offline
подобную цепочку сообщений может генерировать и любое другое изменение
статуса: связанное с отсутствием пользователя около компьютера или с
изменением небольшого текстового сообщения, которое обычно отображается
в контакт листе рядом с ником пользователя и призвано отображать текущее
его состояние, занятие или чего там только не пишут (эта функция не
всегда предоставляется &lt;abbr title="Instant Messaging"&gt;IM&lt;/abbr&gt;-сервисами, но наверняка многим знакома по
&lt;em&gt;ICQ&lt;/em&gt;, если не по &lt;em&gt;Jabber&lt;/em&gt;). Все эти сообщения как раз и стоят за
"presence" в аббревиатуре &lt;abbr title="eXtensible Messaging and Presence Protocol"&gt;XMPP&lt;/abbr&gt;, суммарный траффик, ими генерируемый,
может в несколько раз превышать траффик от собственно самих текстовых
сообщений.&lt;/p&gt;
&lt;p&gt;Если учесть факты, описанные в предыдущем абзаце, не трудно догадаться,
что зависимость суммарного количества presence-сообщений от количества
пользователей &lt;abbr title="Instant Messaging"&gt;IM&lt;/abbr&gt;-сервиса далеко не линейна. Их количество за какой-то
период времени можно очень приблизительно посчитать как произведение
трех параметров: количества пользователей online, средней длины списка
контактов среди них и количества изменений статуса каждым пользователем.
А каждый дополнительный пользователь в системе так или иначе увеличивает
как минимум два из этих трех параметров.&lt;/p&gt;
&lt;p&gt;Введение несколько затянулась, а проблема масштабируемости &lt;abbr title="eXtensible Messaging and Presence Protocol"&gt;XMPP&lt;/abbr&gt;-сервисов
я думаю теперь стала очевидна, так что сейчас очень подходящий момент,
чтобы вернуться к основной теме разговора - сервису Google Talk и том,
как команда его разработчиков решает эту проблему.&lt;/p&gt;
&lt;h3 id="istochniki-informatsii"&gt;Источники информации&lt;/h3&gt;
&lt;p&gt;Наверное уже стало заметно, что это не очередной перевод, а лично мной
написанный текстик. Так что сразу выдам
&lt;a href="https://www.insight-it.ru/goto/bd0c001f/" rel="nofollow" target="_blank" title="http://video.google.com/videoplay?docid=6202268628085731280"&gt;видео&lt;/a&gt;,
являющееся основным источником информации, и продолжу.&lt;/p&gt;
&lt;h3 id="arkhitektura"&gt;Архитектура&lt;/h3&gt;
&lt;p&gt;Со стороны Google (о котором я, кстати говоря, &lt;a href="https://www.insight-it.ru/highload/2008/arkhitektura-google/"&gt;уже писал&lt;/a&gt;) было бы глупо строить
сервис мгновенного обмена сообщениями в стороне от остальных
коммуникационных сервисов, предоставляемых этой компанией. Еще до своего
публичного старта Google Talk был интегрирован в почтовый сервис
&lt;a href="https://www.insight-it.ru/goto/af1829ed/" rel="nofollow" target="_blank" title="http://www.gmail.com"&gt;GMail&lt;/a&gt; и социальную сеть
&lt;a href="https://www.insight-it.ru/goto/31afe99f/" rel="nofollow" target="_blank" title="http://www.orkut.com"&gt;Orkut&lt;/a&gt;: эти сервисы просто запрашивали у Google
Talk присутствие online пользователей из своего списка контактов при
возникновении соответствующих событий, но при этом не отображали
результаты в своих страницах. Таким образом разработчики получили
возможность оценить предстоящие нагрузки и готовность сервиса к
публичному запуску намного более точно, чем они могли бы это сделать
средствами синтетических тестов.&lt;/p&gt;
&lt;p&gt;В отношении распределения нагрузок, сразу же был выбран и реализован
подход, связанный с разбиением пользователей на группы и распределением
работы с каждой отдельной группой по разным серверам. Это позволило
избежать всей той эволюции серверной части приложения от одного сервера
до большого кластера, что впрочем вполне оправданно, так как сразу же
после запуска сервису предстояло столкнуться с огромным количеством
пользователей и не ничуть не меньшей нагрузкой. Разработчики не забыли и
сразу же предусмотреть безболезненный перенос пользователей с одного
сервера на другой без видимых для него изменений, это позволило очень
гибко изменять количество серверов в системе.&lt;/p&gt;
&lt;p&gt;С точки зрения интеграции сервиса с другими проектами
&lt;a href="/tag/google/"&gt;Google&lt;/a&gt;, очень важно было предоставить определенный
уровень абстракции для взаимодействия в виде API и набора адресов, по
которым необходимо обращаться к сервису. Придерживаясь одного API можно
производить практически любые архитектурные или программные изменения в
рамках проекта таким образом, что все его пользователи и проекты, в
которые он интегрирован, просто не заметят что что-то изменилось.
Адреса, к которым происходит обращение при обмене данных, так же
являются своеобразной абстракцией - можно переместить сервис в новый
датацентр и благодаря DNS трафик будет направляться в нужное место.&lt;/p&gt;
&lt;p&gt;С другой стороны необходимо учитывать и программное обеспечение
работающие ниже уровнем, чем собственно код приложения: особенно ядро
операционной системы и используемые библиотеки. В данном случае большую
роль играет количество открытых TCP соединений, так как &lt;abbr title="Instant Messaging"&gt;IM&lt;/abbr&gt; требует
большое их количество, но активность в них не велика.&lt;/p&gt;
&lt;p&gt;Разработчики Google Talk постарались как можно больше внимания уделить
возможным сбоям и связанным с ними ситуациям. Любое даже запланированное
временное прекращение функционирования какой-то части системы может
резко увеличить нагрузку на остальную часть, даже если это просто
перезагрузка части системы - из-за очистившегося кэша серверы снова
начнут полноценно функционировать далеко не сразу, не говоря уже о
непредвиденных сбоях, когда последствия намного более глобальны. Для
своевременного устранения потенциальных проблем как с общем
функционированием системы, так и с недостаточной производительностью,
ведутся логи для всех этапов обработки запросов, а также предусмотрена
возможность профайлинга прямо на работающих в системе серверах.&lt;/p&gt;
&lt;p&gt;Но не стоит забывать и о клиентской части программного обеспечения:
какая-нибудь глупая ошибка в коде клиента сервиса запросто может
устроить DDoS атаку на сервис, что и случилось с одной из ранних версий
клиента Google Talk. Помимо этого необходимо поддерживать совместимость
разных версий клиентских приложений.&lt;/p&gt;
&lt;h3 id="zakliuchenie"&gt;Заключение&lt;/h3&gt;
&lt;p&gt;Благодаря описанным выше принципам Google Talk удается обрабатывать
каждое из миллиардов сообщений в день менее чем за 100 миллисекунд.
Тесная интеграция с другими сервисами &lt;a href="/tag/google/"&gt;Google&lt;/a&gt; позволила
проекту сразу же получить невероятную популярность, а продуманный подход
к разработке сервиса позволил справиться с огромной нагрузкой.&lt;/p&gt;
&lt;p&gt;На этот раз статья получилась скорее о специфике сервиса, чем о его
реализации. Технической информации найти практически не удалось, так что
очень кратко все, но надеюсь и в таком варианте было достаточно
интересно почитать. Напоследок хочу порекомендовать &lt;a href="/feed/"&gt;подписаться на RSS&lt;/a&gt;, если не хотите пропустить публикацию новых постов.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Thu, 22 May 2008 16:39:00 +0400</pubDate><guid>tag:www.insight-it.ru,2008-05-22:highload/2008/arkhitektura-googletalk/</guid><category>Google</category><category>Google Talk</category><category>IM</category><category>Jabber</category><category>Java</category><category>Linux</category><category>online</category><category>sharding</category><category>XMPP</category><category>архитектура</category><category>архитектура Google Talk</category><category>присутствие</category></item><item><title>Архитектура Google</title><link>https://www.insight-it.ru//highload/2008/arkhitektura-google/</link><description>&lt;p&gt;&lt;em&gt;Эта статья датируется 2008 годом, новая версия: &lt;a href="https://www.insight-it.ru/highload/2011/arkhitektura-google-2011/"&gt;Архитектура Google 2011&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="/tag/google/"&gt;Google&lt;/a&gt;&lt;/strong&gt; - Король масштабируемости.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Каждый хоть раз слышал о &lt;a href="/tag/google/"&gt;Google&lt;/a&gt; благодаря их
всеобъемлющему, "умному" и быстрому поисковому сервису, но ни для кого
не секрет, что они не ограничиваются только им. Их платформа для
построения масштабируемых приложений позволяет выпускать множество
удивительно конкурентноспособных интернет-приложений, работающих на
уровне всего Интернета вцелом. Они ставят перед собой цель постоянно
строить все более и более производительную и масштабируемую архитектуру
для поддержки своих продуктов. Как же им это удается?
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id="istochniki-informatsii"&gt;Источники информации&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Сразу хочу сказать, что эта запись является переводом с английского,
автор &lt;a href="https://www.insight-it.ru/goto/31bfd110/" rel="nofollow" target="_blank" title="http://highscalability.com/google-architecture"&gt;оригинальной версии&lt;/a&gt; - &lt;a href="https://www.insight-it.ru/goto/f3f1b405/" rel="nofollow" target="_blank" title="http://highscalability.com/user/todd-hoff"&gt;Todd Hoff&lt;/a&gt;. Оригинал написан приблизительно в середине 2007 года, но по-моему до сих пор очень даже актуально.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Далее следует перечисление источников информации из оригинала:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/741bec4c/" rel="nofollow" target="_blank" title="http://video.google.com/videoplay?docid=-5699448884004201579"&gt;Video: Построение больших систем в Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/fae0d413/" rel="nofollow" target="_blank" title="http://labs.google.com/papers/gfs.html"&gt;Google Lab: Файловая система Google (GFS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/39138d08/" rel="nofollow" target="_blank" title="http://labs.google.com/papers/mapreduce.html"&gt;Google Lab: MapReduce: упрощенная обработка данных на больших кластерах&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/8667b351/" rel="nofollow" target="_blank" title="http://labs.google.com/papers/bigtable.html"&gt;Google Lab: BigTable.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/dab5470e/" rel="nofollow" target="_blank" title="http://video.google.com/videoplay?docid=7278544055668715642"&gt;Video: BigTable: система распределенного хранения данных.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/87fff9b2/" rel="nofollow" target="_blank" title="http://www.baselinemag.com/article2/0,1540,1985514,00.asp"&gt;Как работает Google&lt;/a&gt;
    от David Carr в Baseline Magazine.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/a426f3de/" rel="nofollow" target="_blank" title="http://labs.google.com/papers/sawzall.html"&gt;Google Lab: интерпретирование данных. Параллельный анализ с помощью Sawzall.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insight-it.ru/goto/ed8bca67/" rel="nofollow" target="_blank" title="http://www.25hoursaday.com/weblog/2007/06/25/GoogleScalabilityConferenceTripReportMapReduceBigTableAndOtherDistributedSystemAbstractionsForHandlingLargeDatasets.aspx"&gt;Записи с конференции по масштабированию от Dare Obasonjo.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="platforma"&gt;Платформа&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/tag/linux/"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Большое разнообразие языков программирования: &lt;a href="/tag/python/"&gt;Python&lt;/a&gt;,
    &lt;a href="/tag/java/"&gt;Java&lt;/a&gt;, &lt;a href="/tag/c/"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chto-vnutri"&gt;Что внутри?&lt;/h3&gt;
&lt;h4&gt;Статистика&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;На 2006 год система включала в себя 450000 недорогих серверов&lt;/li&gt;
&lt;li&gt;За 2005 год было проиндексировано 8 миллиардов страниц. На данный
    момент&amp;hellip; кто знает?&lt;/li&gt;
&lt;li&gt;На момент написания оригинала Google включает в себя более 200
    &lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt; кластеров. Один кластер может состоять из 1000 или
    даже 5000 компьютеров&lt;/li&gt;
&lt;li&gt;Десятки и сотни тысяч компьютеров получают данные из &lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt;
    кластеров, которые насчитывают более 5 петабайт дискового
    пространства. Суммарные пропускная способность операций записи и
    чтения между дата центрами может достигать 40 гигабайт в секунду&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/bigtable/"&gt;BigTable&lt;/a&gt; позволяет хранить миллиарды ссылок (URL),
    сотни терабайт снимков со спутников, а также настройки миллионов
    пользователей&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;// Цифры не первой свежести конечно, но тоже неплохо.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Стек&lt;/h4&gt;
&lt;p&gt;&lt;a href="/tag/google/"&gt;Google&lt;/a&gt; визуализирует свою инфраструктуру в виде
трехслойного стека:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Продукты:&lt;/em&gt; поиск, реклама, электронная почта, карты, видео, чат,
    блоги&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Распределенная инфраструктура системы:&lt;/em&gt; &lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt;,
    &lt;a href="/tag/mapreduce/"&gt;MapReduce&lt;/a&gt; и &lt;a href="/tag/bigtable/"&gt;BigTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Вычислительные платформы:&lt;/em&gt; множество компьютеров во множестве
    датацентров&lt;/li&gt;
&lt;li&gt;Легкое развертывание для компании при низком уровне издержек&lt;/li&gt;
&lt;li&gt;Больше денег вкладывается в оборудование для исключения возможности
    потерь данных&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Надежное хранение данных с помощью &lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Надежное масштабируемое хранение данных крайне необходимо для любого
    приложения. &lt;strong&gt;GFS&lt;/strong&gt; является основой их платформы хранения
    информации&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt;&lt;/strong&gt; - большая распределенная файловая система, способная хранить и обрабатывать огромные объемы информации&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Зачем строить что-либо самим вместо того, чтобы просто взять это с полки?&lt;/em&gt; Они контролируют абсолютно всю систему и именно эта платформа отличает их от всех остальных.&lt;/p&gt;
&lt;p&gt;Она предоставляет:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;высокую надежность дата центров&lt;/li&gt;
&lt;li&gt;масштабируемость до тысяч сетевых узлов
&amp;ndash; высокую пропускную способность операций чтения и записи&lt;/li&gt;
&lt;li&gt;поддержку больших блоков данных, размер которых может измеряться в
гигабайтах&lt;/li&gt;
&lt;li&gt;эффективное распределение операций между датацентрами для
избежания возникновения "узких мест" в системе&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В системе существуют мастер-сервера и сервера, собственно хранящие
    информацию:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Мастер-сервера хранят метаданные для всех файлов. Сами данные
    хранятся блоками по 64 мегабайта на остальных серверах. Клиенты
    могут выполнять операции с метаданными на мастер-серверах, чтобы
    узнать на каком именно сервере расположены необходимые данные.&lt;/li&gt;
&lt;li&gt;Для обеспечения надежности один и тот же блок данных хранится
    в трех экземплярах на разных серверах, что обеспечивает
    избыточность на случай сбоев в работе какого-либо сервера.&lt;/li&gt;
&lt;li&gt;Новые приложения могут пользоваться как существующими
    кластерами, так и новыми, созданными специально для них.&lt;/li&gt;
&lt;li&gt;Ключ успеха заключается в том, чтобы быть уверенными в том,
    что у людей есть достаточно вариантов выбора для реализации их
    приложений. &lt;strong&gt;&lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt;&lt;/strong&gt; может быть настроена для
    удовлетворения нужд любого конкретного приложения.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Работаем с данными при помощи MapReduce&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Теперь, когда у нас есть отличная система хранения, что же делать с
    такими объемами данных? Допустим, у нас есть много терабайт данных,
    равномерно распределенных между 1000 компьютерами. Коммерческие базы
    данных не могут эффективно масштабироваться до такого уровня, именно
    в такой ситуации в дело вступает технология
    &lt;strong&gt;&lt;a href="/tag/mapreduce/"&gt;MapReduce&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="/tag/mapreduce/"&gt;MapReduce&lt;/a&gt;&lt;/strong&gt; является программной моделью и
    соответствующей реализацией обработки и генерации больших наборов
    данных. Пользователи могут задавать функцию, обрабатывающую пары
    ключ/значение для генерации промежуточных аналогичных пар, и
    сокращающую функцию, которая объединяет все промежуточные значения,
    соответствующие одному и тому же ключу. Многие реальные задачи могут
    быть выражены с помощью этой модели. Программы, написанные в таком
    функциональном стиле автоматически распараллеливаются и адаптируются
    для выполнения на обширных кластерах. Система берет на себя детали
    разбиения входных данных на части, составления расписания выполнения
    программ на различных компьютерах, управления ошибками, и
    организации необходимой коммуникации между компьютерами. Это
    позволяет программистам, не обладающим опытом работы с параллельными
    и распределенными системами, легко использовать все ресурсы больших
    распределенных систем.&lt;/li&gt;
&lt;li&gt;Зачем использовать &lt;strong&gt;&lt;a href="/tag/mapreduce/"&gt;MapReduce&lt;/a&gt;&lt;/strong&gt;?
    &amp;ndash; Отличный способ распределения задач между множеством компьютеров
    &amp;ndash; Обработка сбоев в работе
    &amp;ndash; Работа с различными типами смежных приложений, таких как поиск или
    реклама. Возможно предварительное вычисление и обработка данных,
    подсчет количества слов, сортировка терабайт данных и так далее
    &amp;ndash; Вычисления автоматически приближаются к источнику ввода-вывода&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="/tag/mapreduce/"&gt;MapReduce&lt;/a&gt;&lt;/strong&gt; использует три типа серверов:&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Master:&lt;/em&gt; назначают задания остальным типам серверов, а также
следят за процессом их выполнения&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Map:&lt;/em&gt; принимают входные данные от пользователей и обрабатывают
их, результаты записываются в промежуточные файлы&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Reduce:&lt;/em&gt; принимают промежуточные файлы от Map-серверов и
сокращают их указанным выше способом&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Например, мы хотим посчитать количество слов на всех страницах. Для
    этого нам необходимо передать все страницы, хранимые в &lt;strong&gt;GFS&lt;/strong&gt;, на
    обработку в &lt;strong&gt;MapReduce&lt;/strong&gt;. Этот процесс будет происходить на тысячах
    машин одновременно с полной координацией действий, в соответствии с
    автоматически составленным расписанием выполняемых работ, обработкой
    потенциальных ошибок, и передачей данных выполняемыми автоматически.&lt;ul&gt;
&lt;li&gt;Последовательность выполняемых действий выглядела бы следующим
образом: &lt;code&gt;GFS &amp;rarr; Map &amp;rarr; перемешивание &amp;rarr; Reduce &amp;rarr; запись результатов обратно в GFS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Технология &lt;strong&gt;MapReduce&lt;/strong&gt; состоит из двух компонентов:
соответственно &lt;em&gt;map&lt;/em&gt; и &lt;em&gt;reduce&lt;/em&gt;. Map отображает один набор данных в
другой, создавая тем самым пары ключ/значение, которпыми в нашем
случае являются слова и их количества.&lt;/li&gt;
&lt;li&gt;В процессе перемешивания происходит агрегирование типов ключей.&lt;/li&gt;
&lt;li&gt;Reduction в нашем случае просто суммирует все результаты и
возвращает финальный результат.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;В процессе индексирования &lt;a href="/tag/google/"&gt;Google&lt;/a&gt; подвергает поток
    данных обработке около 20 разных механизмов сокращения. Сначала идет
    работа над всеми записями и агрегированными ключами, после чего
    результат передается следующему механизму и второй механизм уже
    работает с результатами работы первого, и так далее.&lt;/li&gt;
&lt;li&gt;Программы могут быть очень маленькими, всего лишь от 20 до 50 строк
    кода.&lt;/li&gt;
&lt;li&gt;Единственной проблемой могут быть "отстающие компьютеры". Если один
    компьютер работает существенно медленнее, чем все остальные, это
    будет задерживать работу всей системы в целом.&lt;/li&gt;
&lt;li&gt;Транспортировка данных между серверами происходит в сжатом виде.
    Идея заключается в том, что ограничивающим фактором является
    пропускная способность канала и ввода-вывода, что делает резонным
    потратить часть процессорного времени на компрессию и декомпрессию
    данных.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Хранение структурированных данных в BigTable&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BigTable&lt;/strong&gt; является крупномасштабной, устойчивой к потенциальным
    ошибкам, самоуправляемой системой, которая может включать в себя
    терабайты памяти и петабайты данных, а также управлять миллионами
    операций чтения и записи в секунду.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BigTable&lt;/strong&gt; представляет собой распределенный механизм хэширования,
    построенный поверх &lt;strong&gt;&lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt;&lt;/strong&gt;, а вовсе не реляционную базу
    данных и, как следствие, не поддерживает &lt;a href="/tag/sql/"&gt;SQL&lt;/a&gt;-запросы и
    операции типа Join.&lt;/li&gt;
&lt;li&gt;Она предоставляет механизм просмотра данных для получения доступа к
    структурированным данным по имеющемуся ключу. &lt;strong&gt;&lt;a href="/tag/gfs/"&gt;GFS&lt;/a&gt;&lt;/strong&gt;
    хранит данные не поддающиеся пониманию, хотя многим приложениям
    необходимы структурированные данные.&lt;/li&gt;
&lt;li&gt;Коммерческие базы данных попросту не могут масштабироваться до
    такого уровня и, соответственно, не могут работать с тысячами машин
    одновременно.&lt;/li&gt;
&lt;li&gt;С помощью контролирования своих низкоуровневых систем хранения
    данных, &lt;a href="/tag/google/"&gt;Google&lt;/a&gt; получает больше возможностей по
    управлению и модификации их системой. Например, если им понадобится
    функция, упрощающая координацию работы между датацентрами, они
    просто могут написать ее и внедрить в систему.&lt;/li&gt;
&lt;li&gt;Подключение и отключение компьютеров к функционирующей системе никак
    не мешает ей просто работать.&lt;/li&gt;
&lt;li&gt;Каждый блок данных хранится в ячейке, доступ к которой может быть
    предоставлен как по ключу строки или столбца, так и по временной
    метке.&lt;/li&gt;
&lt;li&gt;Каждая строка может храниться в одной или нескольких таблицах.
    Таблицы реализуются в виде последовательности блоков по 64
    килобайта, организованных в формате данных под названием
    &lt;strong&gt;SSTable&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;В &lt;strong&gt;&lt;a href="/tag/bigtable/"&gt;BigTable&lt;/a&gt;&lt;/strong&gt; тоже используется три типа серверов:&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Master:&lt;/em&gt; распределяют таблицы по Tablet-серверам, а также следят
за расположением таблиц и перераспределяют задания в случае
необходимости.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Tablet:&lt;/em&gt; обрабатывают запросы чтения/записи для таблиц. Они
разделяют таблицы, когда те превышают лимит размера (обычно 100-200
мегабайт). Когда такой сервер прекращает функционирование по
каким-либо причинам, 100 других серверов берут на себя по одной
таблице и система продолжает работать как-будто ничего не произошло.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lock:&lt;/em&gt; формируют распределенный сервис ограничения одновременного
доступа. Операции открытия таблицы для записи, анализа
Master-сервером или проверки доступа должны быть
взаимоисключающими.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Локальная группировка может быть использована для физического
    хранения связанных данных вместе, чтобы обеспечить лучшую
    локализацию ссылок на данные.&lt;/li&gt;
&lt;li&gt;Таблицы по возможности кэшируются в оперативной памяти серверов.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oborudovanie"&gt;Оборудование&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Как эффективно организовать большую группу компьютеров с точки
    зрения издержек и производительности?&lt;/li&gt;
&lt;li&gt;Используется самое обыкновенное ультра-дешевое оборудование и поверх
    него строится программное обеспечение, способное спокойно пережить
    смерть любой части оборудования.&lt;/li&gt;
&lt;li&gt;Тысячекратный рост вычислительной мощности может быть достигнут с
    издержками в 33 раза меньшими, если воспользоваться толерантной к
    сбоям инфраструктурой, по сравнению с инфраструктурой, построенной
    на высоконадежных компонентах. Надежность строится поверх ненадежных
    компонентов.&lt;/li&gt;
&lt;li&gt;&lt;a href="/tag/linux/"&gt;Linux&lt;/a&gt;, домашнее размещение серверов, материнские платы
    предназначенные для персональных компьютеров, дешевые средства
    хранения данных.&lt;/li&gt;
&lt;li&gt;Цена за каждый ватт энергии в расчете на производительность не
    становится меньше, что ведет к большим проблемам связанным с
    энергообеспечением и охлаждением.&lt;/li&gt;
&lt;li&gt;Использование совместного размещения в своих и арендуемых
    датацентрах.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="raznoe"&gt;Разное&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Быстрый выпуск изменений более предпочтителен, чем ожидание.&lt;/li&gt;
&lt;li&gt;Библиотеки - превалирующий метод построения программ.&lt;/li&gt;
&lt;li&gt;Некоторые приложения предоставляются в виде сервисов.&lt;/li&gt;
&lt;li&gt;Инфраструктура управляет определением версий приложений таким
    образом, что они могут выпускать новые продукты, не боясь сломать
    работу какого-либо компонента системы.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="puti-razvitiia"&gt;Пути развития&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Поддержка географически распределенных кластеров.&lt;/li&gt;
&lt;li&gt;Создание единого глобального пространства имен для всех данных. На
    данный момент данные распределены по кластерам.&lt;/li&gt;
&lt;li&gt;Более автоматизированные передача и обработка данных&lt;/li&gt;
&lt;li&gt;Решение вопросов, связанных с поддержанием работоспособности
    сервисов даже в тех случаях, когда целый кластер отключается от
    системы в связи с техническими работами или каким-либо сбоем в
    работе.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="podvodim-itogi"&gt;Подводим итоги&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Инфраструктура может быть конкурентным преимуществом.&lt;/strong&gt; Это
    определенно так для Google. Они могут выпускать новые интернет
    сервисы быстрее, с меньшими издержками, на таком уровне, что мало
    кто сможет составить им конкуренцию. Подход многих компаний сильно
    отличается от подхода &lt;a href="/tag/google/"&gt;Google&lt;/a&gt;, эти компании
    рассматривают инфраструктуру как статью расходов, они обычно
    используют совсем другие технологии и совсем не задумываются о
    планировании и организации своей системы. Google позиционирует себя
    как компанию по построению систем, что является очень современным
    подходом к разработке программного обеспечения.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Охватывание нескольких дата центров до сих пор является нерешенной проблемой.&lt;/strong&gt; Большинство сайтов базируется в одном или двух дата
    центрах. Полное распределение сайта между несколькими датацентрами
    является хитрой задачей.&lt;/li&gt;
&lt;li&gt;Взгляните на &lt;em&gt;&lt;a href="https://www.insight-it.ru/goto/30a7481/" rel="nofollow" target="_blank" title="http://hadoop.apache.org/core/"&gt;Hadoop&lt;/a&gt;&lt;/em&gt;, если у Вас
    нет времени на собственноручное построение всей архитектуры с нуля.
    &lt;em&gt;Hadoop&lt;/em&gt; является opensource воплощением в жизнь многих идей здесь
    представленных.&lt;/li&gt;
&lt;li&gt;Часто недооцениваемым преимуществом платформенного подхода является
    тот факт, что даже неопытные разработчики могут быстро и качественно
    реализовывать трудоемкие приложения на базе платформы. Но если бы
    каждый проект требовал одинаково распределенной архитектуры, то это
    создало бы много проблем, так как люди, которые понимают как это
    делается, являются достаточно большой редкостью.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Совместная деятельность не всегда является таким уж плохим занятием.&lt;/strong&gt; Если все части системы работают взаимосвязанно, то
    улучшение в одной из них сразу и абсолютно прозрачно отразится
    положительным образом и на остальных компонентах системы. В
    противном случае такой эффект наблюдаться не будет.&lt;/li&gt;
&lt;li&gt;Построение самоуправляемых систем позволяет более легко
    перераспределять ресурсы между серверами, расширять систему,
    отключать некоторые компьютеры и элегантно проводить обновления.&lt;/li&gt;
&lt;li&gt;Производить длительные операции стоит параллельно.&lt;/li&gt;
&lt;li&gt;Всему, что было сделано Google, предшествовало искусство, а не
    только крупномасштабное развертывание системы.&lt;/li&gt;
&lt;li&gt;Учитывайте возможность &lt;strong&gt;компрессии данных&lt;/strong&gt;, она является очень
    неплохим решением, если остается лишнее процессорное время, но
    присутствует нехватка пропускной способности.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Thu, 31 Jan 2008 18:05:00 +0300</pubDate><guid>tag:www.insight-it.ru,2008-01-31:highload/2008/arkhitektura-google/</guid><category>BigTable</category><category>featured</category><category>GFS</category><category>Google</category><category>MapReduce</category><category>online</category><category>Sawzall</category><category>архитектура</category><category>архитектура Google</category><category>интернет</category><category>кластер</category><category>Масштабируемость</category><category>поиск</category><category>сервер</category><category>хранение данных</category></item></channel></rss>