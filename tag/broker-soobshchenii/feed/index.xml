<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Insight IT</title><link>https://www.insight-it.ru/</link><description></description><atom:link href="https://www.insight-it.ru/tag/broker-soobshchenii/feed/index.xml" rel="self"></atom:link><lastBuildDate>Sat, 10 Mar 2012 01:19:00 +0400</lastBuildDate><item><title>RabbitMQ</title><link>https://www.insight-it.ru//erlang/2012/rabbitmq/</link><description>&lt;p&gt;Когда веб-приложение перестает быть просто коллекцией скриптов,
генерирующих HTML, встает вопрос о взаимодействии различных компонентов
системы. Есть два основных подхода:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;обращение &lt;strong&gt;напрямую&lt;/strong&gt; посредством протоколов вроде
    &lt;a href="/tag/thrift/"&gt;Thrift&lt;/a&gt; или &lt;a href="/tag/protocol-buffers/"&gt;Protocol Buffers&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;либо посредством &lt;strong&gt;брокера сообщений&lt;/strong&gt;, посредника, берущего на себя
    вопросы их маршрутизации и доставки одному или нескольким
    получателям, даже в случае сбоев оборудования и недоступности
    сетевого соединения.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Сегодня я хотел бы рассказать об одной из лучших, на мой взгляд,
реализаций брокера сообщений, &lt;strong&gt;RabbitMQ&lt;/strong&gt;. Хотите узнать почему я так
считаю? - Дочитайте до конца :)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="osnovnye-poniatiia"&gt;Основные понятия&lt;/h2&gt;
&lt;p&gt;Слоганом &lt;a href="https://www.insight-it.ru/goto/4799c299/" rel="nofollow" target="_blank" title="http://www.rabbitmq.com"&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/a&gt; является &lt;em&gt;"обмен
сообщениями, который просто работает"&lt;/em&gt;. Отчасти с этим утверждением
можно согласиться, для того чтобы сервис обмена сообщениями "просто
заработал" достаточно простой команды &lt;code&gt;aptitude install rabbitmq-server&lt;/code&gt; или аналога для операционных систем, не основанных на
&lt;a href="/tag/debian/"&gt;Debian&lt;/a&gt;. Но кому этого будет достаточно? Как минимум
нужно научить свой проект эти сообщения отправлять и принимать, а как
максимум - обрабатывать десятки и сотни тысяч сообщений в секунду, но
обо всем по порядку.&lt;/p&gt;
&lt;p&gt;В основе RabbitMQ лежит протокол &lt;a href="https://www.insight-it.ru/goto/4d3139fc/" rel="nofollow" target="_blank" title="http://www.amqp.org"&gt;AMQP&lt;/a&gt;, который
вводит&amp;nbsp;три основных понятия:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Сообщение&lt;/strong&gt; &lt;em&gt;(message)&lt;/em&gt;&amp;nbsp;- единица информации, которая передается
    от отправителя к получателю(ям); состоит из набора заголовков и
    содержания, которое брокером никак не интерпретируются.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Точка обмена&lt;/strong&gt; &lt;em&gt;(exchange)&lt;/em&gt;&amp;nbsp;- распределяет отправленные сообщения
    между одной или несколькими очередями в соответствии с их
    заголовками.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Очередь&lt;/strong&gt; &lt;em&gt;(queue)&lt;/em&gt;&amp;nbsp;- место, где хранятся сообщения до тех пор,
    пока их не заберет получатель.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Базовые механизмы взаимодействия с брокером очень просты:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Отправить сообщение&lt;/strong&gt; &lt;em&gt;(publish)&lt;/em&gt; - сообщение сериализуется в
    определенный формат, при необходимости снабжается маршрутной меткой
    &lt;em&gt;(routing key)&lt;/em&gt;&amp;nbsp;и передается в RabbitMQ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Получать сообщение&lt;/strong&gt; &lt;em&gt;(consume или subscribe)&lt;/em&gt; - приложение
    регистрируется в RabbitMQ с указанием какие именно сообщения оно
    готово получать и обрабатывать, после чего ожидает их доставки.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Перед началом любого взаимодействия с брокером клиент должен указать
какая точка обмена должна заниматься обработкой его сообщений, что при
необходимости её и зарегистрирует. При этом он указывает её название и
тип, которых доступно три:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Отправка всем&lt;/strong&gt; &lt;em&gt;(fanout)&lt;/em&gt; - как следует из названия, каждое
    сообщение получат все очереди, связанные с данной точкой обмена,
    типичная публикация-подписка &lt;em&gt;(publish-subscribe)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Прямая&lt;/strong&gt; &lt;em&gt;(direct)&lt;/em&gt;&amp;nbsp;- сообщение получит только та очередь, которая
    имеет название, соответствующее маршрутной метке сообщения, типичная
    очередь сообщений &lt;em&gt;(message queue).&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Тематическая&lt;/strong&gt; &lt;em&gt;(topic)&lt;/em&gt; - очереди при регистрации указывают
    паттерн маршрутных меток сообщений, которые они хотели бы получать.
    Этот механизм позволяет наиболее гибко управлять маршрутизацией
    сообщений и строить нетривиальные схемы доставки. Вместо регулярных
    выражений используется очень простая схема: метки в виде слов,
    разделенных точками; в паттерне &lt;code&gt;*&lt;/code&gt; заменяет ровно одно слово, &lt;code&gt;#&lt;/code&gt; -
    ноль или больше; при отсутствии этих символов работает как прямая
    точка обмена.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="card blue lighten-4"&gt;
&lt;p&gt;&lt;div class="card-content"&gt;
Если Вашему приложению достаточно простых подписки-публикации или
очереди сообщений, а также нет необходимости гарантировать доставку
сообщений или обрабатывать потоки сообщений, превышающие возможности
одного сервера, то можно рассмотреть более простые в эксплуатации
решения, не основанные на AMQP. В такой ситуации я рекомендовал бы
первым делом взглянуть на &lt;a href="/tag/redis/"&gt;Redis&lt;/a&gt;. Если это не про Вас, то
продолжаем разбираться с RabbitMQ.
&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="tipichnye-stsenarii"&gt;Типичные сценарии&lt;/h2&gt;
&lt;h3 id="vypolnenie-dlitelnykh-operatsii"&gt;Выполнение длительных операций&lt;/h3&gt;
&lt;p&gt;Представим себя интернет-проектом, который размещает у себя
пользовательские видео или фото. Когда он получает по HTTP очередной
файл, ему требуется сконвертировать его в стандартный формат для
просмотра другими пользователями, а также, например, сделать несколько
превью разного размера.&lt;/p&gt;
&lt;p&gt;По-старинке эти операции делают последовательно в том же обработчике
запроса, который и принял от пользователя файл. В схеме с брокером же
после принятия файла он отправляет сообщение, в содержании которого
будет, вероятно, ссылка на файла-оригинал, после чего он возвращает
браузеру сообщение об успешной загрузке файла. Для отправки таких
сообщений используют &lt;strong&gt;прямую точку обмена&lt;/strong&gt;, с какой-то стандартной
маршрутной меткой и соответствующим именем очереди, например
&lt;code&gt;process_video&lt;/code&gt; или &lt;code&gt;create_thumbnails&lt;/code&gt;. Процессы, реализующие совершенно
независимый сервис по выполнению этих длительных операций, будут по
очереди забирать сообщения с "заданиями" из брокера, позволяя легко
создавать любое количество исполнителей c &lt;strong&gt;балансировкой нагрузки&lt;/strong&gt;,
что обеспечит горизонтальное масштабирование этой подсистемы.&lt;/p&gt;
&lt;p&gt;Еще один доступный механизм, который вписывается в эту задачу -
&lt;strong&gt;подтверждение о получении сообщения&lt;/strong&gt; &lt;em&gt;(acknowledgement)&lt;/em&gt;. Получатель
должен отправить брокеру&amp;nbsp;дополнительное сообщение о том, что такое-то
сообщение было успешно получено, в противном случае оно останется в
очереди ожидать следующего получателя. Если процессы-исполнители будут
подтверждать получение только после успешного выполнения длительной
операции, это будет гарантировать, что все задания будут успешно
выполнены вне зависимости от сбоев на каждом конкретном исполнителе, что
обеспечивает &lt;strong&gt;отказоустойчивость&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="udalennyi-vyzov-rpc"&gt;Удаленный вызов (RPC)&lt;/h3&gt;
&lt;p&gt;Для некоторых приложений важно не только отправить запрос на выполнение
какой-то операции, но и получить в ответ какой-то результат. На самом
деле использование брокера сообщений в этой ситуации не всегда является
удачным решением, проще делать это напрямую посредством других
технологий. Но если в системе итак присутствует брокер, а для удаленного
вызова нет строгих требований по времени выполнения, плюс хочется
подобно предыдущему примеру легко получить отказоустойчивость и
балансировку нагрузки, то можно реализовать удаленный вызов и через
брокер сообщений.&lt;/p&gt;
&lt;p&gt;Для этого предусмотрено два заголовка сообщений:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Обратный адрес&lt;/strong&gt; &lt;em&gt;(reply to)&lt;/em&gt; - исполнитель должен отправить
    результат в очередь с указанным именем; отравитель сразу же после
    передачи сообщения-запроса брокеру начинает получать сообщения из
    указанной в этом заголовке очереди.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Идентификатор запроса&lt;/strong&gt; &lt;em&gt;(correlation id)&lt;/em&gt; - должен быть
    уникальным среди запросов, чтобы отправитель мог сопоставить
    результаты с запросами.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="soobshcheniia-polzovateliam"&gt;Сообщения пользователям&lt;/h3&gt;
&lt;p&gt;Очереди можно использовать как входящие почтовые ящики для пользователей
веб-приложений. Какие-то компоненты системы или другие пользователи с
использованием &lt;em&gt;прямой точки обмена&lt;/em&gt; отправляют сообщения в очереди,
содержащие в названии уникальный идентификатор пользователя-получателя.
Там они ожидают пока он их не прочитает, например, зайдя на определенную
страницу сайта.&lt;/p&gt;
&lt;p&gt;В этом примере очень важно использовать режим постоянных сообщений
&lt;em&gt;(persistant, путем установки заголовка &lt;code&gt;delivery_mode=2&lt;/code&gt;)&lt;/em&gt;, так как
получатель сообщения может появиться очень не скоро и важно чтобы
сообщения "переживали" даже полный перезапуск брокера сообщений. Для
более короткоживущих сообщений это менее критично, но тоже порой
актуально, особенно как еще одна мера для обеспечения
&lt;strong&gt;отказоустойчивости&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Пример хоть и немного оторванный от реальности из-за очистки почтового
ящика после каждого прочтения, но в каких-то ситуациях все же может
иметь право на существование.&lt;/p&gt;
&lt;h3 id="dvustoronnee-soedinenie-s-brauzerom"&gt;Двустороннее соединение с браузером&lt;/h3&gt;
&lt;p&gt;Пожалуй, самый "вкусный" пример, хоть и лежащий на поверхности. На
многих крупных &lt;a href="https://www.insight-it.ru/highload/"&gt;интернет-проектах&lt;/a&gt;, особенно социальной направленности можно увидеть уведомления &lt;em&gt;в реальном времени&lt;/em&gt; о событиях на сайте - кто-то что-то написал, поставил +1, проголосовал и т.п.&lt;/p&gt;
&lt;p&gt;Реализация этого функционала требует довольно серьезной работы как на
стороне браузера, так и на серверной стороне. Браузерный вопрос выходит
за рамки этой статьи (хотя тут у меня тоже есть что рассказать,
отдельным постом когда-нибудь обязательно напишу), а вот на серверной
стороне брокер сообщений окажется очень даже кстати, особенно в
реализации RabbitMQ.&lt;/p&gt;
&lt;p&gt;На серверной части эта задача делится на две части:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Поддерживать &lt;strong&gt;постоянное соединение&lt;/strong&gt; со всеми пользователями, кто
    находится онлайн - здесь на помощь обычно приходит либо
    &lt;a href="/tag/erlang/"&gt;Erlang&lt;/a&gt;, либо неблокирующий сервер на
    &lt;a href="/tag/epoll/"&gt;epoll&lt;/a&gt;. Оба варианта очень неплохие, выбирайте сами.&lt;/li&gt;
&lt;li&gt;Дальше нужно как-то организовать &lt;strong&gt;доставку сообщений&lt;/strong&gt; (информацию
    о событиях в системе) между пользователями, где и вступает в игру
    брокер. Обработчик соединения подписывается на сообщения о публичных
    событиях (точка обмена "отправить всем"), и туда же отправляет
    информацию о действиях пользователя-владельца.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Чем больше пользователей онлайн, тем больше сообщений в единицу времени
будет проходить через брокер. Один сервер перестанет справляться
довольно быстро, так что следующий раздел статьи окажется очень кстати.&lt;/p&gt;
&lt;h2 id="klasterizatsiia_1"&gt;Кластеризация&lt;/h2&gt;
&lt;p&gt;Многое из вышеизложенного справедливо и для других реализаций
&lt;a href="/tag/amqp/"&gt;AMQP&lt;/a&gt;, но в вопросе кластеризации &lt;strong&gt;RabbitMQ&lt;/strong&gt; предстает во
всей красе. Залогом этого в первую очередь является использование
&lt;a href="/tag/erlang/"&gt;Erlang&lt;/a&gt;, не знаю почему я до сих пор не написал статью
про этот язык программирования, здесь достаточно было бы на нее
сослаться и все стало бы ясно.&lt;/p&gt;
&lt;p&gt;Если вкратце, то в Erlang реализована внутренняя система легковесных
процессов, не имеющая общего состояния и взаимодействующая друг с другом
&lt;em&gt;исключительно&lt;/em&gt; посредством обменом сообщений. При этом с точки
разработчика отправка сообщений другому процессу на том же физическом
сервером и на удаленном выглядит одинаково, и даже является одним из
операторов языка - "!", наравне с "=", "+" и.т.п. Этот факт позволяет
приложениям или их частям взаимодействовать по сети так же легко, как и
в рамках одного сервера.&lt;/p&gt;
&lt;p&gt;Чтобы определить разрешено ли разным Erlang-сервера взаимодействовать
друг с другом, они обмениваются хэшем пароля (который правда называют
&lt;strong&gt;cookie&lt;/strong&gt;, хотя с одноименным механизмом браузеров он ничего общего не
имеет)&amp;nbsp;и продолжают работу только если он совпал. Он должен быть
одинаковым на всех узлах и хранится в файле &lt;code&gt;~/.erlang.cookie&lt;/code&gt;, для
RabbitMQ это обычно &lt;code&gt;/var/lib/rabbitmq/.erlang.cookie&lt;/code&gt; - первым делом
нужно решить этот вопрос, а также убедиться, что используется
нестандартное значение.&lt;/p&gt;
&lt;p&gt;Узлы в RabbitMQ кластере могут быть двух типов: работающие только &lt;strong&gt;в
памяти&lt;/strong&gt; и сохраняющие данные &lt;strong&gt;на диск&lt;/strong&gt;. Так как состояние системы
реплицируется между узлами кластера, в большинстве случаев достаточно
иметь лишь 2-3 дисковых узла, а остальные избавить от необходимости
работать с дисковой подсистемой для увеличения производительности.&lt;/p&gt;
&lt;p&gt;Важно понимать, что под состоянием системы здесь имеются ввиду лишь
привязки и настройки брокеров, каждая же очередь и хранящиеся в ней
сообщения располагаются на одном конкретном узле, что приведет к потери
части сообщений при сбое одного из серверов. Этот вопрос можно решить и
средствами операционной системы, но чаще всего правильнее выделить
критически-важные для системы очереди сообщений и включить их репликацию
средствами RabbitMQ, этот механизм называется &lt;a href="https://www.insight-it.ru/goto/3ff295d5/" rel="nofollow" target="_blank" title="http://www.rabbitmq.com/ha.html"&gt;&lt;strong&gt;зеркальные очереди&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;(mirrored queues)&lt;/em&gt;. &amp;nbsp;Репликация происходит по принципу &lt;strong&gt;мастер-слуга&lt;/strong&gt; &lt;em&gt;(master-slave)&lt;/em&gt;,
как и в реляционных СУБД: все операции осуществляются на основном
сервере (мастере), он транслирует их на один или несколько вторичных
серверов (слуги), при каком-либо сбое на основном один из слуг
"повышается" до статуса мастера и берет на себя его функции. Очереди
могут быть объявлены зеркальными только при создании, но новые узлы в
роли слуг могут добавляться и позже, в таком случае новый слуга начнет
получать входящие сообщения и рано или поздно начнет полностью отражать
его состояние, механизма синхронизации при подключении дополнительного
слуги не предусмотрено. Последним шагом для гарантированной доставки
сообщений, не упоминавшимся ранее, является механизм&amp;nbsp;&lt;strong&gt;уведомления
отправителя об успешной записи сообщения&lt;/strong&gt; в очередь (на все сервера для
зеркальных).&lt;/p&gt;
&lt;p&gt;В кластерном окружении может понадобиться &lt;strong&gt;объединение точек обмена&lt;/strong&gt;
&lt;em&gt;(exchange federation)&lt;/em&gt;, что реализуется посредством пересылки сообщений
по однонаправленным связям. При этом учитывается наличие на принимающей
стороне очередей, готовых принять каждое конкретное сообщение.
Практического применения в веб-проектах этому пока особо не вижу, разве
что при кросс-датацентровой работе. Кстати, для этого поддерживается
работа поверх &lt;a href="https://www.insight-it.ru/goto/c397c12c/" rel="nofollow" target="_blank" title="http://www.rabbitmq.com/ssl.html"&gt;SSL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Для подключения узлов к кластеру можно использовать консольную утилиту
(для временных изменений) или конфигурационные файлы (для постоянных
настроек), подробно &lt;a href="https://www.insight-it.ru/goto/db4a1208/" rel="nofollow" target="_blank" title="http://www.rabbitmq.com/clustering.html"&gt;останавливаться не буду&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="podvodim-itogi"&gt;Подводим итоги&lt;/h2&gt;
&lt;p&gt;Используя брокер сообщений при технической реализации интернет-проекта,
можно перевести его на совершенно новый уровень с точек зрения
&lt;em&gt;отказоустойчивости&lt;/em&gt; и &lt;em&gt;горизонтальной масштабируемости&lt;/em&gt;. Во многих
случаях он становится "сердцем" приложения, без которого его
существование было бы немыслимо, но в то же время благодаря
кластеризации не становится &lt;strong&gt;единственной точкой отказа&lt;/strong&gt; &lt;em&gt;(single
point of failure)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Хоть многое из упомянутого в статье можно реализовать и с помощью других
технологий, &lt;strong&gt;RabbitMQ&lt;/strong&gt; является наиболее приспособленной к реалиям
современного Интернета реализацией брокера сообщений и AMQP в частности,
в первую очередь благодаря распределенной природе Erlang и качественно
спроектированной архитектуре этого продукта.&lt;/p&gt;
&lt;p&gt;В комментариях с удовольствием обсудил бы применение RabbitMQ и других
брокеров сообщения в различных практических ситуациях; еще можно
подискутировать по поводу его преимуществ и недостатков по сравнению с
альтернативами, в каких ситуациях это проявляется.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Жду Вас среди &lt;a href="/feed/"&gt;постоянных читателей Insight IT&lt;/a&gt;, число
которых недавно перевалило за 14 тысяч :)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Иван Блинков</dc:creator><pubDate>Sat, 10 Mar 2012 01:19:00 +0400</pubDate><guid>tag:www.insight-it.ru,2012-03-10:erlang/2012/rabbitmq/</guid><category>AMQP</category><category>Erlang</category><category>RabbitMQ</category><category>брокер</category><category>брокер сообщений</category><category>обмен сообщениями</category><category>сообщения</category></item></channel></rss>